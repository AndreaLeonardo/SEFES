
Basta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b0  080061b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b8  080061b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004210  20000074  08006234  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004284  08006234  00024284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ec8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f60  00000000  00000000  00034f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00037ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00039138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec6  00000000  00000000  0003a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cc7  00000000  00000000  00053156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fd1  00000000  00000000  00066e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fedee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  000fee40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f60 	.word	0x08005f60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005f60 	.word	0x08005f60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	20000148 	.word	0x20000148

080005b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d013      	beq.n	80005f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	e000      	b.n	80005e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e009      	b.n	8000630 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffc7 	bl	80005b8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf1      	blt.n	800061c <_write+0x16>
  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <testFuncS1>:
TaskHandle_t xHandle2 = NULL;
TaskHandle_t xHandle3 = NULL;
TaskHandle_t xHandle4 = NULL;

static void testFuncS1( void *pvParameters )
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	osDelay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f002 fe79 	bl	8003344 <osDelay>
	printf("TestS1 %d\r\n", xTaskGetTickCount());
 8000652:	f003 fbf9 	bl	8003e48 <xTaskGetTickCount>
 8000656:	4603      	mov	r3, r0
 8000658:	4619      	mov	r1, r3
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <testFuncS1+0x24>)
 800065c:	f004 fd9e 	bl	800519c <iprintf>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08005f78 	.word	0x08005f78

0800066c <testFuncS2>:

static void testFuncS2( void *pvParameters )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	osDelay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f002 fe65 	bl	8003344 <osDelay>
	printf("TestS2 %d\r\n", xTaskGetTickCount());
 800067a:	f003 fbe5 	bl	8003e48 <xTaskGetTickCount>
 800067e:	4603      	mov	r3, r0
 8000680:	4619      	mov	r1, r3
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <testFuncS2+0x24>)
 8000684:	f004 fd8a 	bl	800519c <iprintf>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	08005f84 	.word	0x08005f84

08000694 <testFuncS3>:

static void testFuncS3( void *pvParameters )
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	osDelay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f002 fe51 	bl	8003344 <osDelay>
	printf("TestS3 %d\r\n", xTaskGetTickCount());
 80006a2:	f003 fbd1 	bl	8003e48 <xTaskGetTickCount>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <testFuncS3+0x24>)
 80006ac:	f004 fd76 	bl	800519c <iprintf>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08005f90 	.word	0x08005f90

080006bc <testFuncS4>:

static void testFuncS4( void *pvParameters )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	osDelay(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f002 fe3d 	bl	8003344 <osDelay>
	printf("TestS4 %d\r\n", xTaskGetTickCount());
 80006ca:	f003 fbbd 	bl	8003e48 <xTaskGetTickCount>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <testFuncS4+0x24>)
 80006d4:	f004 fd62 	bl	800519c <iprintf>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	08005f9c 	.word	0x08005f9c

080006e4 <testFunc1>:



static void testFunc1( void *pvParameters ){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	printf("Test1\n");
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <testFunc1+0x1c>)
 80006ee:	f004 fddb 	bl	80052a8 <puts>
	osDelay(100);
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f002 fe26 	bl	8003344 <osDelay>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08005fa8 	.word	0x08005fa8

08000704 <testFunc2>:

static void testFunc2( void *pvParameters )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	printf("Test2\n");
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <testFunc2+0x1c>)
 800070e:	f004 fdcb 	bl	80052a8 <puts>
	osDelay(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f002 fe16 	bl	8003344 <osDelay>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08005fb0 	.word	0x08005fb0

08000724 <testFunc3>:

static void testFunc3( void *pvParameters ){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	printf("Test3\n");
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <testFunc3+0x1c>)
 800072e:	f004 fdbb 	bl	80052a8 <puts>
	osDelay(100);
 8000732:	2064      	movs	r0, #100	; 0x64
 8000734:	f002 fe06 	bl	8003344 <osDelay>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	08005fb8 	.word	0x08005fb8

08000744 <testFunc4>:

static void testFunc4(void *pvParameters)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	printf("Test4\n");
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <testFunc4+0x1c>)
 800074e:	f004 fdab 	bl	80052a8 <puts>
	osDelay(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f002 fdf6 	bl	8003344 <osDelay>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08005fc0 	.word	0x08005fc0

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f001 f91d 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f8e7 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f97b 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000776:	f000 f94f 	bl	8000a18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf( " Hello from Freertos\r\n" );
 800077a:	4854      	ldr	r0, [pc, #336]	; (80008cc <main+0x168>)
 800077c:	f004 fd94 	bl	80052a8 <puts>

  	char c1 = 'a';
 8000780:	2361      	movs	r3, #97	; 0x61
 8000782:	70fb      	strb	r3, [r7, #3]
  	char c2 = 'b';
 8000784:	2362      	movs	r3, #98	; 0x62
 8000786:	70bb      	strb	r3, [r7, #2]
  	char c3 = 'c';
 8000788:	2363      	movs	r3, #99	; 0x63
 800078a:	707b      	strb	r3, [r7, #1]
  	char c4 = 'e';
 800078c:	2365      	movs	r3, #101	; 0x65
 800078e:	703b      	strb	r3, [r7, #0]


  	vSchedulerInit();
 8000790:	f000 ff08 	bl	80015a4 <vSchedulerInit>

  	vSchedulerPeriodicTaskCreate(testFunc1, "t1", configMINIMAL_STACK_SIZE, &c1, 1, &xHandle1, pdMS_TO_TICKS(0), pdMS_TO_TICKS(800), pdMS_TO_TICKS(500), pdMS_TO_TICKS(800));
 8000794:	1cfb      	adds	r3, r7, #3
 8000796:	f44f 7248 	mov.w	r2, #800	; 0x320
 800079a:	9205      	str	r2, [sp, #20]
 800079c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a0:	9204      	str	r2, [sp, #16]
 80007a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80007a6:	9203      	str	r2, [sp, #12]
 80007a8:	2200      	movs	r2, #0
 80007aa:	9202      	str	r2, [sp, #8]
 80007ac:	4a48      	ldr	r2, [pc, #288]	; (80008d0 <main+0x16c>)
 80007ae:	9201      	str	r2, [sp, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	9200      	str	r2, [sp, #0]
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	4947      	ldr	r1, [pc, #284]	; (80008d4 <main+0x170>)
 80007b8:	4847      	ldr	r0, [pc, #284]	; (80008d8 <main+0x174>)
 80007ba:	f000 faef 	bl	8000d9c <vSchedulerPeriodicTaskCreate>
  	vSchedulerPeriodicTaskCreate(testFunc2, "t2", configMINIMAL_STACK_SIZE, &c2, 2, &xHandle2, pdMS_TO_TICKS(0), pdMS_TO_TICKS(1600), pdMS_TO_TICKS(500), pdMS_TO_TICKS(1600));
 80007be:	1cbb      	adds	r3, r7, #2
 80007c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007c4:	9205      	str	r2, [sp, #20]
 80007c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007ca:	9204      	str	r2, [sp, #16]
 80007cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007d0:	9203      	str	r2, [sp, #12]
 80007d2:	2200      	movs	r2, #0
 80007d4:	9202      	str	r2, [sp, #8]
 80007d6:	4a41      	ldr	r2, [pc, #260]	; (80008dc <main+0x178>)
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	2202      	movs	r2, #2
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	493f      	ldr	r1, [pc, #252]	; (80008e0 <main+0x17c>)
 80007e2:	4840      	ldr	r0, [pc, #256]	; (80008e4 <main+0x180>)
 80007e4:	f000 fada 	bl	8000d9c <vSchedulerPeriodicTaskCreate>
  	vSchedulerPeriodicTaskCreate(testFunc3, "t3", configMINIMAL_STACK_SIZE, &c3, 3, &xHandle3, pdMS_TO_TICKS(0), pdMS_TO_TICKS(600), pdMS_TO_TICKS(500), pdMS_TO_TICKS(600));
 80007e8:	1c7b      	adds	r3, r7, #1
 80007ea:	f44f 7216 	mov.w	r2, #600	; 0x258
 80007ee:	9205      	str	r2, [sp, #20]
 80007f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007f4:	9204      	str	r2, [sp, #16]
 80007f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80007fa:	9203      	str	r2, [sp, #12]
 80007fc:	2200      	movs	r2, #0
 80007fe:	9202      	str	r2, [sp, #8]
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <main+0x184>)
 8000802:	9201      	str	r2, [sp, #4]
 8000804:	2203      	movs	r2, #3
 8000806:	9200      	str	r2, [sp, #0]
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	4938      	ldr	r1, [pc, #224]	; (80008ec <main+0x188>)
 800080c:	4838      	ldr	r0, [pc, #224]	; (80008f0 <main+0x18c>)
 800080e:	f000 fac5 	bl	8000d9c <vSchedulerPeriodicTaskCreate>
  	vSchedulerPeriodicTaskCreate(testFunc4, "t4", configMINIMAL_STACK_SIZE, &c4, 4, &xHandle4, pdMS_TO_TICKS(0), pdMS_TO_TICKS(900), pdMS_TO_TICKS(500), pdMS_TO_TICKS(900));
 8000812:	463b      	mov	r3, r7
 8000814:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000818:	9205      	str	r2, [sp, #20]
 800081a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800081e:	9204      	str	r2, [sp, #16]
 8000820:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000824:	9203      	str	r2, [sp, #12]
 8000826:	2200      	movs	r2, #0
 8000828:	9202      	str	r2, [sp, #8]
 800082a:	4a32      	ldr	r2, [pc, #200]	; (80008f4 <main+0x190>)
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2204      	movs	r2, #4
 8000830:	9200      	str	r2, [sp, #0]
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	4930      	ldr	r1, [pc, #192]	; (80008f8 <main+0x194>)
 8000836:	4831      	ldr	r0, [pc, #196]	; (80008fc <main+0x198>)
 8000838:	f000 fab0 	bl	8000d9c <vSchedulerPeriodicTaskCreate>

  	BaseType_t xReturnValue = xSchedulerSporadicJobCreate( testFuncS1, "S1", "S1-1", pdMS_TO_TICKS( 500 ), pdMS_TO_TICKS( 6000 ) );
 800083c:	f241 7370 	movw	r3, #6000	; 0x1770
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000846:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <main+0x19c>)
 8000848:	492e      	ldr	r1, [pc, #184]	; (8000904 <main+0x1a0>)
 800084a:	482f      	ldr	r0, [pc, #188]	; (8000908 <main+0x1a4>)
 800084c:	f000 fd7a 	bl	8001344 <xSchedulerSporadicJobCreate>
 8000850:	6078      	str	r0, [r7, #4]
  	if( pdFALSE == xReturnValue )
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <main+0xfa>
  	{
  		printf("Sporadic job S1 not accepted\r\n");
 8000858:	482c      	ldr	r0, [pc, #176]	; (800090c <main+0x1a8>)
 800085a:	f004 fd25 	bl	80052a8 <puts>
  	}

  	xReturnValue = xSchedulerSporadicJobCreate( testFuncS2, "S2", "S2-1", pdMS_TO_TICKS( 500 ), pdMS_TO_TICKS( 40000 ) );
 800085e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000868:	4a29      	ldr	r2, [pc, #164]	; (8000910 <main+0x1ac>)
 800086a:	492a      	ldr	r1, [pc, #168]	; (8000914 <main+0x1b0>)
 800086c:	482a      	ldr	r0, [pc, #168]	; (8000918 <main+0x1b4>)
 800086e:	f000 fd69 	bl	8001344 <xSchedulerSporadicJobCreate>
 8000872:	6078      	str	r0, [r7, #4]
  	if( pdFALSE == xReturnValue )
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <main+0x11c>
  	{
  		printf("Sporadic job S2 not accepted\r\n");
 800087a:	4828      	ldr	r0, [pc, #160]	; (800091c <main+0x1b8>)
 800087c:	f004 fd14 	bl	80052a8 <puts>
  	}

  	xReturnValue = xSchedulerSporadicJobCreate( testFuncS3, "S3", "S3-1", pdMS_TO_TICKS( 500 ), pdMS_TO_TICKS( 20000 ) );
 8000880:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800088a:	4a25      	ldr	r2, [pc, #148]	; (8000920 <main+0x1bc>)
 800088c:	4925      	ldr	r1, [pc, #148]	; (8000924 <main+0x1c0>)
 800088e:	4826      	ldr	r0, [pc, #152]	; (8000928 <main+0x1c4>)
 8000890:	f000 fd58 	bl	8001344 <xSchedulerSporadicJobCreate>
 8000894:	6078      	str	r0, [r7, #4]
  	if( pdFALSE == xReturnValue )
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <main+0x13e>
  	{
  		printf("Sporadic job S3 not accepted\r\n");
 800089c:	4823      	ldr	r0, [pc, #140]	; (800092c <main+0x1c8>)
 800089e:	f004 fd03 	bl	80052a8 <puts>
  	}
  	xReturnValue = xSchedulerSporadicJobCreate( testFuncS4, "S4", "S4-1", pdMS_TO_TICKS( 500 ), pdMS_TO_TICKS( 20000 ) );
 80008a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ac:	4a20      	ldr	r2, [pc, #128]	; (8000930 <main+0x1cc>)
 80008ae:	4921      	ldr	r1, [pc, #132]	; (8000934 <main+0x1d0>)
 80008b0:	4821      	ldr	r0, [pc, #132]	; (8000938 <main+0x1d4>)
 80008b2:	f000 fd47 	bl	8001344 <xSchedulerSporadicJobCreate>
 80008b6:	6078      	str	r0, [r7, #4]
  	if( pdFALSE == xReturnValue )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <main+0x160>
  	{
  		printf("Sporadic job S4 not accepted\r\n");
 80008be:	481f      	ldr	r0, [pc, #124]	; (800093c <main+0x1d8>)
 80008c0:	f004 fcf2 	bl	80052a8 <puts>
  	}


  	vSchedulerStart();
 80008c4:	f000 fe90 	bl	80015e8 <vSchedulerStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <main+0x164>
 80008ca:	bf00      	nop
 80008cc:	08005fc8 	.word	0x08005fc8
 80008d0:	2000038c 	.word	0x2000038c
 80008d4:	08005fe0 	.word	0x08005fe0
 80008d8:	080006e5 	.word	0x080006e5
 80008dc:	20000390 	.word	0x20000390
 80008e0:	08005fe4 	.word	0x08005fe4
 80008e4:	08000705 	.word	0x08000705
 80008e8:	20000394 	.word	0x20000394
 80008ec:	08005fe8 	.word	0x08005fe8
 80008f0:	08000725 	.word	0x08000725
 80008f4:	20000398 	.word	0x20000398
 80008f8:	08005fec 	.word	0x08005fec
 80008fc:	08000745 	.word	0x08000745
 8000900:	08005ff0 	.word	0x08005ff0
 8000904:	08005ff8 	.word	0x08005ff8
 8000908:	08000645 	.word	0x08000645
 800090c:	08005ffc 	.word	0x08005ffc
 8000910:	0800601c 	.word	0x0800601c
 8000914:	08006024 	.word	0x08006024
 8000918:	0800066d 	.word	0x0800066d
 800091c:	08006028 	.word	0x08006028
 8000920:	08006048 	.word	0x08006048
 8000924:	08006050 	.word	0x08006050
 8000928:	08000695 	.word	0x08000695
 800092c:	08006054 	.word	0x08006054
 8000930:	08006074 	.word	0x08006074
 8000934:	0800607c 	.word	0x0800607c
 8000938:	080006bd 	.word	0x080006bd
 800093c:	08006080 	.word	0x08006080

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f004 fb87 	bl	8005062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemClock_Config+0xd0>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <SystemClock_Config+0xd0>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <SystemClock_Config+0xd0>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xd4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xd4>)
 800098e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xd4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 faae 	bl	8001f2c <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009d6:	f000 f8c9 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fd10 	bl	800241c <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a02:	f000 f8b3 	bl	8000b6c <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f002 f9b6 	bl	8002dc0 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f887 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000348 	.word	0x20000348
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000af8:	f001 f9fe 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_GPIO_Init+0xd8>)
 8000b14:	f001 f86c 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000b30:	f001 f85e 	bl	8001bf0 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020800 	.word	0x40020800

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 ff47 	bl	80019ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <prvAddTCBToList>:
	}
	
#elif( schedUSE_TCB_SORTED_LIST == 1 )
	/* Add an extended TCB to sorted linked list. */
	static void prvAddTCBToList( SchedTCB_t *pxTCB )
	{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
		/* Initialise TCB list item. */
		vListInitialiseItem( &pxTCB->xTCBListItem );
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3338      	adds	r3, #56	; 0x38
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fc11 	bl	80033ac <vListInitialiseItem>
		/* Set owner of list item to the TCB. */
		listSET_LIST_ITEM_OWNER( &pxTCB->xTCBListItem, pxTCB );
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	645a      	str	r2, [r3, #68]	; 0x44
		/* List is sorted by absolute deadline value. */
		listSET_LIST_ITEM_VALUE( &pxTCB->xTCBListItem, pxTCB->xAbsoluteDeadline );
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a1a      	ldr	r2, [r3, #32]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
			/* There is no need to sort the list. */
		#endif /* schedEDF_EFFICIENT */

		#if( schedEDF_NAIVE == 1 )
			/* Insert TCB into list. */
			vListInsert( pxTCBList, &pxTCB->xTCBListItem );
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <prvAddTCBToList+0x38>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3338      	adds	r3, #56	; 0x38
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f002 fc33 	bl	800340e <vListInsert>
			/* Insert TCB into ready list. */
			vListInsert( pxTCBReadyList, &pxTCB->xTCBListItem );
			/* Insert TCB into list containing tasks in any state. */
			vListInsert( pxTCBListAll, &pxTCB->xTCBAllListItem );
		#endif /* schedEDF_EFFICIENT */
	}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200003dc 	.word	0x200003dc

08000bb4 <prvSwapList>:

#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
	#if( schedUSE_TCB_SORTED_LIST == 1 )
		/* Swap content of two lists. */
		static void prvSwapList( List_t **ppxList1, List_t **ppxList2 )
		{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
		List_t *pxTemp;
			pxTemp = *ppxList1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]
			*ppxList1 = *ppxList2;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	601a      	str	r2, [r3, #0]
			*ppxList2 = pxTemp;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]
		}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <prvUpdatePrioritiesEDF>:
	#endif /* schedUSE_TCB_SORTED_LIST */

	#if( schedEDF_NAIVE == 1 )
		/* Update priorities of all periodic tasks with respect to EDF policy. */
		static void prvUpdatePrioritiesEDF( void )
		{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

			#if( schedUSE_TCB_SORTED_LIST == 1 )
				ListItem_t *pxTCBListItem;
				ListItem_t *pxTCBListItemTemp;
			
				if( listLIST_IS_EMPTY( pxTCBList ) && !listLIST_IS_EMPTY( pxTCBOverflowedList ) )
 8000be6:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d108      	bne.n	8000c02 <prvUpdatePrioritiesEDF+0x22>
 8000bf0:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <prvUpdatePrioritiesEDF+0x100>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <prvUpdatePrioritiesEDF+0x22>
				{
					prvSwapList( &pxTCBList, &pxTCBOverflowedList );
 8000bfa:	4939      	ldr	r1, [pc, #228]	; (8000ce0 <prvUpdatePrioritiesEDF+0x100>)
 8000bfc:	4837      	ldr	r0, [pc, #220]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000bfe:	f7ff ffd9 	bl	8000bb4 <prvSwapList>
				}

				const ListItem_t *pxTCBListEndMarker = listGET_END_MARKER( pxTCBList );
 8000c02:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3308      	adds	r3, #8
 8000c08:	617b      	str	r3, [r7, #20]
				pxTCBListItem = listGET_HEAD_ENTRY( pxTCBList );
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	61fb      	str	r3, [r7, #28]

				while( pxTCBListItem != pxTCBListEndMarker )
 8000c12:	e023      	b.n	8000c5c <prvUpdatePrioritiesEDF+0x7c>
				{
					pxTCB = listGET_LIST_ITEM_OWNER( pxTCBListItem );
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60fb      	str	r3, [r7, #12]

					/* Update priority in the SchedTCB list. */
					listSET_LIST_ITEM_VALUE( pxTCBListItem, pxTCB->xAbsoluteDeadline );
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6a1a      	ldr	r2, [r3, #32]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	601a      	str	r2, [r3, #0]

					pxTCBListItemTemp = pxTCBListItem;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	60bb      	str	r3, [r7, #8]
					pxTCBListItem = listGET_NEXT( pxTCBListItem );
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	61fb      	str	r3, [r7, #28]
					uxListRemove( pxTCBListItem->pxPrevious );
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fc25 	bl	8003480 <uxListRemove>

					/* If absolute deadline overflowed, insert TCB to overflowed list. */
					if( pxTCB->xAbsoluteDeadline < pxTCB->xLastWakeTime )
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6a1a      	ldr	r2, [r3, #32]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d206      	bcs.n	8000c50 <prvUpdatePrioritiesEDF+0x70>
					{
						vListInsert( pxTCBOverflowedList, pxTCBListItemTemp );
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <prvUpdatePrioritiesEDF+0x100>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fbe0 	bl	800340e <vListInsert>
 8000c4e:	e005      	b.n	8000c5c <prvUpdatePrioritiesEDF+0x7c>
					}
					else /* Insert TCB into temp list in usual case. */
					{
						vListInsert( pxTCBTempList, pxTCBListItemTemp );
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <prvUpdatePrioritiesEDF+0x104>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fbd9 	bl	800340e <vListInsert>
				while( pxTCBListItem != pxTCBListEndMarker )
 8000c5c:	69fa      	ldr	r2, [r7, #28]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d1d7      	bne.n	8000c14 <prvUpdatePrioritiesEDF+0x34>
					}
				}

				/* Swap list with temp list. */
				prvSwapList( &pxTCBList, &pxTCBTempList );
 8000c64:	491f      	ldr	r1, [pc, #124]	; (8000ce4 <prvUpdatePrioritiesEDF+0x104>)
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000c68:	f7ff ffa4 	bl	8000bb4 <prvSwapList>

				#if( schedUSE_SCHEDULER_TASK == 1 )
					BaseType_t xHighestPriority = schedSCHEDULER_PRIORITY - 1;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	61bb      	str	r3, [r7, #24]
				#else
					BaseType_t xHighestPriority = configMAX_PRIORITIES - 1;
				#endif /* schedUSE_SCHEDULER_TASK */

				const ListItem_t *pxTCBListEndMarkerAfterSwap = listGET_END_MARKER( pxTCBList );
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3308      	adds	r3, #8
 8000c76:	613b      	str	r3, [r7, #16]
				pxTCBListItem = listGET_HEAD_ENTRY( pxTCBList );
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <prvUpdatePrioritiesEDF+0xfc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	61fb      	str	r3, [r7, #28]
				while( pxTCBListItem != pxTCBListEndMarkerAfterSwap )
 8000c80:	e023      	b.n	8000cca <prvUpdatePrioritiesEDF+0xea>
				{
					pxTCB = listGET_LIST_ITEM_OWNER( pxTCBListItem );
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	60fb      	str	r3, [r7, #12]
					configASSERT( -1 <= xHighestPriority );
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c8e:	da0a      	bge.n	8000ca6 <prvUpdatePrioritiesEDF+0xc6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c94:	f383 8811 	msr	BASEPRI, r3
 8000c98:	f3bf 8f6f 	isb	sy
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ca2:	bf00      	nop
 8000ca4:	e7fe      	b.n	8000ca4 <prvUpdatePrioritiesEDF+0xc4>
					pxTCB->uxPriority = xHighestPriority;
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	611a      	str	r2, [r3, #16]
					vTaskPrioritySet( *pxTCB->pxTaskHandle, pxTCB->uxPriority );
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4610      	mov	r0, r2
 8000cba:	f002 ff07 	bl	8003acc <vTaskPrioritySet>

					xHighestPriority--;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
					pxTCBListItem = listGET_NEXT( pxTCBListItem );
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	61fb      	str	r3, [r7, #28]
				while( pxTCBListItem != pxTCBListEndMarkerAfterSwap )
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d1d7      	bne.n	8000c82 <prvUpdatePrioritiesEDF+0xa2>
				}
			#endif /* schedUSE_TCB_SORTED_LIST */
		}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200003dc 	.word	0x200003dc
 8000ce0:	200003e4 	.word	0x200003e4
 8000ce4:	200003e0 	.word	0x200003e0

08000ce8 <prvPeriodicTaskCode>:
#endif /* schedSCHEDULING_POLICY_EDF */

/* The whole function code that is executed by every periodic task.
 * This function wraps the task code specified by the user. */
static void prvPeriodicTaskCode( void *pvParameters )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
SchedTCB_t *pxThisTask = ( SchedTCB_t * ) pvTaskGetThreadLocalStoragePointer( xTaskGetCurrentTaskHandle(), schedTHREAD_LOCAL_STORAGE_POINTER_INDEX );
 8000cf0:	f003 fb02 	bl	80042f8 <xTaskGetCurrentTaskHandle>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fa15 	bl	8004128 <pvTaskGetThreadLocalStoragePointer>
 8000cfe:	60f8      	str	r0, [r7, #12]
	configASSERT( NULL != pxThisTask );
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10a      	bne.n	8000d1c <prvPeriodicTaskCode+0x34>
	__asm volatile
 8000d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d0a:	f383 8811 	msr	BASEPRI, r3
 8000d0e:	f3bf 8f6f 	isb	sy
 8000d12:	f3bf 8f4f 	dsb	sy
 8000d16:	60bb      	str	r3, [r7, #8]
}
 8000d18:	bf00      	nop
 8000d1a:	e7fe      	b.n	8000d1a <prvPeriodicTaskCode+0x32>

	if( 0 != pxThisTask->xReleaseTime )
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d008      	beq.n	8000d36 <prvPeriodicTaskCode+0x4e>
	{
		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xReleaseTime );
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4610      	mov	r0, r2
 8000d32:	f002 fe19 	bl	8003968 <vTaskDelayUntil>
	}

	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxThisTask->xExecutedOnce = pdTRUE;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	64da      	str	r2, [r3, #76]	; 0x4c
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	if( 0 == pxThisTask->xReleaseTime )
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d103      	bne.n	8000d4c <prvPeriodicTaskCode+0x64>
	{
		pxThisTask->xLastWakeTime = xSystemStartTime;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <prvPeriodicTaskCode+0xb0>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
	for( ; ; )
	{
		#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
			#if( schedEDF_NAIVE == 1 )
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
 8000d4c:	f000 fc0c 	bl	8001568 <prvWakeScheduler>
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */
		pxThisTask->xWorkIsDone = pdFALSE;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
		printf( "tickcount %d Task %s Abs deadline %d lastWakeTime %d prio %d Handle %x\r\n", xTaskGetTickCount(), pxThisTask->pcName, pxThisTask->xAbsoluteDeadline, pxThisTask->xLastWakeTime, uxTaskPriorityGet( NULL ), *pxThisTask->pxTaskHandle );
		taskEXIT_CRITICAL();
		*/

		/* Execute the task function specified by the user. */
		pxThisTask->pvTaskCode( pvParameters );
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	4798      	blx	r3

		pxThisTask->xWorkIsDone = pdTRUE;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2201      	movs	r2, #1
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34
		taskENTER_CRITICAL();
		printf( "execution time %d Task %s\r\n", pxThisTask->xExecTime, pxThisTask->pcName );
		taskEXIT_CRITICAL();
		*/

		pxThisTask->xExecTime = 0;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30

		#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
			pxThisTask->xAbsoluteDeadline = pxThisTask->xLastWakeTime + pxThisTask->xPeriod + pxThisTask->xRelativeDeadline;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	441a      	add	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	441a      	add	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	621a      	str	r2, [r3, #32]
				listSET_LIST_ITEM_VALUE( &pxThisTask->xTCBListItem, pxThisTask->xAbsoluteDeadline );
			#endif /* schedEDF_EFFICIENT */

			#if( schedEDF_NAIVE == 1 )
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
 8000d7e:	f000 fbf3 	bl	8001568 <prvWakeScheduler>
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */

		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xPeriod );
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f002 fdea 	bl	8003968 <vTaskDelayUntil>
				prvWakeScheduler();
 8000d94:	e7da      	b.n	8000d4c <prvPeriodicTaskCode+0x64>
 8000d96:	bf00      	nop
 8000d98:	2000039c 	.word	0x2000039c

08000d9c <vSchedulerPeriodicTaskCreate>:
}

/* Creates a periodic task. */
void vSchedulerPeriodicTaskCreate( TaskFunction_t pvTaskCode, const char *pcName, UBaseType_t uxStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask, TickType_t xPhaseTick, TickType_t xPeriodTick, TickType_t xMaxExecTimeTick, TickType_t xDeadlineTick )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b09c      	sub	sp, #112	; 0x70
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
	taskENTER_CRITICAL();
 8000daa:	f003 fd2b 	bl	8004804 <vPortEnterCritical>
		BaseType_t xIndex = prvFindEmptyElementIndexTCB();
		configASSERT( xTaskCounter < schedMAX_NUMBER_OF_PERIODIC_TASKS );
		configASSERT( xIndex != -1 );
		pxNewTCB = &xTCBArray[ xIndex ];
	#else
		pxNewTCB = pvPortMalloc( sizeof( SchedTCB_t ) );
 8000dae:	2058      	movs	r0, #88	; 0x58
 8000db0:	f003 fe4a 	bl	8004a48 <pvPortMalloc>
 8000db4:	66f8      	str	r0, [r7, #108]	; 0x6c
	#endif /* schedUSE_TCB_ARRAY */


	/* Intialize item. */
	*pxNewTCB = ( SchedTCB_t ) { .pvTaskCode = pvTaskCode, .pcName = pcName, .uxStackDepth = uxStackDepth, .pvParameters = pvParameters,
 8000db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000db8:	4618      	mov	r0, r3
 8000dba:	2358      	movs	r3, #88	; 0x58
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f004 f94f 	bl	8005062 <memset>
 8000dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dde:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000de4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000dee:	619a      	str	r2, [r3, #24]
 8000df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000df2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000df6:	61da      	str	r2, [r3, #28]
 8000df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8000e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		pxNewTCB->xPriorityIsSet = pdFALSE;
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_MANUAL )
		pxNewTCB->xPriorityIsSet = pdTRUE;
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		pxNewTCB->xAbsoluteDeadline = pxNewTCB->xRelativeDeadline + pxNewTCB->xReleaseTime + xSystemStartTime;
 8000e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	441a      	add	r2, r3
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <vSchedulerPeriodicTaskCreate+0xac>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e20:	621a      	str	r2, [r3, #32]
		pxNewTCB->uxPriority = -1;
 8000e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e28:	611a      	str	r2, [r3, #16]
	#endif /* schedSCHEDULING_POLICY */
	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxNewTCB->xExecutedOnce = pdFALSE;
 8000e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	64da      	str	r2, [r3, #76]	; 0x4c
	#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
		pxNewTCB->xSuspended = pdFALSE;
		pxNewTCB->xMaxExecTimeExceeded = pdFALSE;
	#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */
	#if( schedUSE_POLLING_SERVER == 1)
		pxNewTCB->xIsPeriodicServer = pdFALSE;
 8000e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e32:	2200      	movs	r2, #0
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
		xTaskCounter++;
	#elif( schedUSE_TCB_SORTED_LIST == 1 )
		#if( schedEDF_EFFICIENT == 1 )
			pxNewTCB->uxPriority = schedPRIORITY_NOT_RUNNING;
		#endif /* schedEDF_EFFICIENT */
		prvAddTCBToList( pxNewTCB );
 8000e36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000e38:	f7ff fe9e 	bl	8000b78 <prvAddTCBToList>
	#endif /* schedUSE_TCB_SORTED_LIST */
	taskEXIT_CRITICAL();
 8000e3c:	f003 fd12 	bl	8004864 <vPortExitCritical>
}
 8000e40:	bf00      	nop
 8000e42:	3770      	adds	r7, #112	; 0x70
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000039c 	.word	0x2000039c

08000e4c <prvCreateAllTasks>:
	vTaskDelete( xTaskHandle );
}

/* Creates all periodic tasks stored in TCB array, or TCB list. */
static void prvCreateAllTasks( void )
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af02      	add	r7, sp, #8
			}
		
		}
	#elif( schedUSE_TCB_SORTED_LIST == 1 )
		#if( schedEDF_NAIVE ==1 )
			const ListItem_t *pxTCBListEndMarker = listGET_END_MARKER( pxTCBList );
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <prvCreateAllTasks+0x88>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3308      	adds	r3, #8
 8000e58:	613b      	str	r3, [r7, #16]
			ListItem_t *pxTCBListItem = listGET_HEAD_ENTRY( pxTCBList );
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <prvCreateAllTasks+0x88>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	617b      	str	r3, [r7, #20]
		#elif( schedEDF_EFFICIENT == 1 )
			const ListItem_t *pxTCBListEndMarker = listGET_END_MARKER( pxTCBListAll );
			ListItem_t *pxTCBListItem = listGET_HEAD_ENTRY( pxTCBListAll );
		#endif /* schedEDF_EFFICIENT */

		while( pxTCBListItem != pxTCBListEndMarker )
 8000e62:	e02e      	b.n	8000ec2 <prvCreateAllTasks+0x76>
		{
			pxTCB = listGET_LIST_ITEM_OWNER( pxTCBListItem );
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60fb      	str	r3, [r7, #12]
			configASSERT( NULL != pxTCB );
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10a      	bne.n	8000e86 <prvCreateAllTasks+0x3a>
	__asm volatile
 8000e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e74:	f383 8811 	msr	BASEPRI, r3
 8000e78:	f3bf 8f6f 	isb	sy
 8000e7c:	f3bf 8f4f 	dsb	sy
 8000e80:	607b      	str	r3, [r7, #4]
}
 8000e82:	bf00      	nop
 8000e84:	e7fe      	b.n	8000e84 <prvCreateAllTasks+0x38>

			BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6859      	ldr	r1, [r3, #4]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	b298      	uxth	r0, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	68dc      	ldr	r4, [r3, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	6952      	ldr	r2, [r2, #20]
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	4623      	mov	r3, r4
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <prvCreateAllTasks+0x8c>)
 8000ea6:	f002 fb72 	bl	800358e <xTaskCreate>
 8000eaa:	60b8      	str	r0, [r7, #8]
			}
			else
			{
				/* if task creation failed */
			}
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 f908 	bl	80040cc <vTaskSetThreadLocalStoragePointer>
			pxTCBListItem = listGET_NEXT( pxTCBListItem );
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	617b      	str	r3, [r7, #20]
		while( pxTCBListItem != pxTCBListEndMarker )
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d1cc      	bne.n	8000e64 <prvCreateAllTasks+0x18>
		}	
	#endif /* schedUSE_TCB_ARRAY */
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	200003dc 	.word	0x200003dc
 8000ed8:	08000ce9 	.word	0x08000ce9

08000edc <prvInitEDF>:
	}
}
#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
	/* Initializes priorities of all periodic tasks with respect to EDF policy. */
	static void prvInitEDF( void )
	{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
	SchedTCB_t *pxTCB;

		#if( schedEDF_NAIVE == 1 )
			#if( schedUSE_SCHEDULER_TASK == 1 )
				UBaseType_t uxHighestPriority = schedSCHEDULER_PRIORITY - 1;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	60fb      	str	r3, [r7, #12]
			#else
				UBaseType_t uxHighestPriority = configMAX_PRIORITIES - 1;
			#endif /* schedUSE_SCHEDULER_TASK */

			const ListItem_t *pxTCBListEndMarker = listGET_END_MARKER( pxTCBList );
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <prvInitEDF+0x4c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3308      	adds	r3, #8
 8000eec:	607b      	str	r3, [r7, #4]
			ListItem_t *pxTCBListItem = listGET_HEAD_ENTRY( pxTCBList );
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <prvInitEDF+0x4c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]

			while( pxTCBListItem != pxTCBListEndMarker )
 8000ef6:	e00b      	b.n	8000f10 <prvInitEDF+0x34>
			{
				pxTCB = listGET_LIST_ITEM_OWNER( pxTCBListItem );
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	603b      	str	r3, [r7, #0]

				pxTCB->uxPriority = uxHighestPriority;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	611a      	str	r2, [r3, #16]
				uxHighestPriority--;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]

				pxTCBListItem = listGET_NEXT( pxTCBListItem );
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60bb      	str	r3, [r7, #8]
			while( pxTCBListItem != pxTCBListEndMarker )
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d1ef      	bne.n	8000ef8 <prvInitEDF+0x1c>
		#elif( schedEDF_EFFICIENT == 1 )
			ListItem_t *pxTCBListItem = listGET_HEAD_ENTRY( pxTCBReadyList );
			pxCurrentTCB = listGET_LIST_ITEM_OWNER( pxTCBListItem );
			pxCurrentTCB->uxPriority = schedPRIORITY_RUNNING;
		#endif /* schedEDF_EFFICIENT */
	}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200003dc 	.word	0x200003dc

08000f2c <prvPeriodicTaskRecreate>:

#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )

	/* Recreates a deleted task that still has its information left in the task array (or list). */
	static void prvPeriodicTaskRecreate( SchedTCB_t *pxTCB )
	{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68dc      	ldr	r4, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6952      	ldr	r2, [r2, #20]
 8000f4a:	9201      	str	r2, [sp, #4]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4623      	mov	r3, r4
 8000f50:	4602      	mov	r2, r0
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <prvPeriodicTaskRecreate+0x54>)
 8000f54:	f002 fb1b 	bl	800358e <xTaskCreate>
 8000f58:	60f8      	str	r0, [r7, #12]
		if( pdPASS == xReturnValue )
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10a      	bne.n	8000f76 <prvPeriodicTaskRecreate+0x4a>
		{
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, ( SchedTCB_t * ) pxTCB );
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 f8ae 	bl	80040cc <vTaskSetThreadLocalStoragePointer>

			/* This must be set to false so that the task does not miss the deadline immediately when it is created. */
			pxTCB->xExecutedOnce = pdFALSE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		else
		{
			/* if task creation failed */
		}
	}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	08000ce9 	.word	0x08000ce9

08000f84 <prvDeadlineMissedHook>:

	/* Called when a deadline of a periodic task is missed.
	 * Deletes the periodic task that has missed it's deadline and recreate it.
	 * The periodic task is released during next period. */
	static void prvDeadlineMissedHook( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
		printf( "\r\ndeadline missed! %s tick %d\r\n", pxTCB->pcName, xTickCount );
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <prvDeadlineMissedHook+0x5c>)
 8000f98:	f004 f900 	bl	800519c <iprintf>

		/* Delete the pxTask and recreate it. */
		vTaskDelete( *pxTCB->pxTaskHandle );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fc50 	bl	8003848 <vTaskDelete>
		pxTCB->xExecTime = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
		prvPeriodicTaskRecreate( pxTCB );
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffbc 	bl	8000f2c <prvPeriodicTaskRecreate>

		pxTCB->xReleaseTime = pxTCB->xLastWakeTime + pxTCB->xPeriod;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	441a      	add	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
		/* Need to reset lastWakeTime for correct release. */
		pxTCB->xLastWakeTime = 0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
		pxTCB->xAbsoluteDeadline = pxTCB->xRelativeDeadline + pxTCB->xReleaseTime;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	621a      	str	r2, [r3, #32]
		#if( schedEDF_EFFICIENT == 1 )
			listSET_LIST_ITEM_VALUE( &pxTCB->xTCBListItem, pxTCB->xAbsoluteDeadline );
		#endif /* schedEDF_EFFICIENT */
	}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	080060a0 	.word	0x080060a0

08000fe4 <prvCheckDeadline>:

	/* Checks whether given task has missed deadline or not. */
	static void prvCheckDeadline( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
		if( ( NULL != pxTCB ) && ( pdFALSE == pxTCB->xWorkIsDone ) && ( pdTRUE == pxTCB->xExecutedOnce ) )
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d011      	beq.n	8001018 <prvCheckDeadline+0x34>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10d      	bne.n	8001018 <prvCheckDeadline+0x34>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	2b01      	cmp	r3, #1
 8001002:	d109      	bne.n	8001018 <prvCheckDeadline+0x34>
			#if( schedSCHEDULING_POLICY != schedSCHEDULING_POLICY_EDF )
				pxTCB->xAbsoluteDeadline = pxTCB->xLastWakeTime + pxTCB->xRelativeDeadline;
			#endif /* schedSCHEDULING_POLICY */

			/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether deadline is missed. */
			if( ( signed ) ( pxTCB->xAbsoluteDeadline - xTickCount ) < 0 )
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1a      	ldr	r2, [r3, #32]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	da03      	bge.n	8001018 <prvCheckDeadline+0x34>
			{
				/* Deadline is missed. */
				prvDeadlineMissedHook( pxTCB, xTickCount );
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffb6 	bl	8000f84 <prvDeadlineMissedHook>
			}
		}
	}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <prvDeadlineMissedHookSporadicJob>:

	#if( schedUSE_SPORADIC_JOBS == 1 )
		/* Called when a deadline of a sporadic job is missed. */
		static void prvDeadlineMissedHookSporadicJob( BaseType_t xIndex )
		{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
			printf( "\r\ndeadline missed sporadic job! %s\r\n\r\n", xSJCBFifo[ xIndex ].pcName );
 8001028:	4908      	ldr	r1, [pc, #32]	; (800104c <prvDeadlineMissedHookSporadicJob+0x2c>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <prvDeadlineMissedHookSporadicJob+0x30>)
 800103e:	f004 f8ad 	bl	800519c <iprintf>
		}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000444 	.word	0x20000444
 8001050:	080060c0 	.word	0x080060c0

08001054 <prvCheckSporadicJobDeadline>:

		/* Checks if any sporadic job has missed it's deadline. */
		static void prvCheckSporadicJobDeadline( TickType_t xTickCount )
		{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
			if( uxSporadicJobCounter > 0 )
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <prvCheckSporadicJobDeadline+0x68>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d027      	beq.n	80010b4 <prvCheckSporadicJobDeadline+0x60>
			{
			BaseType_t xIndex;
				for( xIndex = xSJCBFifoHead-1; xIndex < uxSporadicJobCounter; xIndex++ )
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <prvCheckSporadicJobDeadline+0x6c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e01d      	b.n	80010aa <prvCheckSporadicJobDeadline+0x56>
				{
					if( -1 == xIndex )
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001074:	d101      	bne.n	800107a <prvCheckSporadicJobDeadline+0x26>
					{
						xIndex = schedMAX_NUMBER_OF_SPORADIC_JOBS - 1;
 8001076:	2303      	movs	r3, #3
 8001078:	60fb      	str	r3, [r7, #12]
					}
					if( schedMAX_NUMBER_OF_SPORADIC_JOBS == xIndex )
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d101      	bne.n	8001084 <prvCheckSporadicJobDeadline+0x30>
					{
						xIndex = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
					}

					/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether deadline is missed. */
					if( ( signed ) ( xSJCBFifo[ xIndex ].xAbsoluteDeadline - xTickCount ) < 0 )
 8001084:	490f      	ldr	r1, [pc, #60]	; (80010c4 <prvCheckSporadicJobDeadline+0x70>)
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3318      	adds	r3, #24
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	da02      	bge.n	80010a4 <prvCheckSporadicJobDeadline+0x50>
					{
						prvDeadlineMissedHookSporadicJob( xIndex );
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff ffbe 	bl	8001020 <prvDeadlineMissedHookSporadicJob>
				for( xIndex = xSJCBFifoHead-1; xIndex < uxSporadicJobCounter; xIndex++ )
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <prvCheckSporadicJobDeadline+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3dc      	bcc.n	800106e <prvCheckSporadicJobDeadline+0x1a>
					}
				}
			}
		}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200004bc 	.word	0x200004bc
 80010c0:	200004b4 	.word	0x200004b4
 80010c4:	20000444 	.word	0x20000444

080010c8 <prvSchedulerCheckTimingError>:

#if( schedUSE_SCHEDULER_TASK == 1 )
	/* Called by the scheduler task. Checks all tasks for any enabled
	 * Timing Error Detection feature. */
	static void prvSchedulerCheckTimingError( TickType_t xTickCount, SchedTCB_t *pxTCB )
	{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
		#endif

		#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
			#if( schedUSE_POLLING_SERVER == 1 )
				/* If the task is periodic server, do not check deadline. */
				if( pdTRUE == pxTCB->xIsPeriodicServer )
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d103      	bne.n	80010e2 <prvSchedulerCheckTimingError+0x1a>
				{
					#if( schedUSE_SPORADIC_JOBS == 1 )
						prvCheckSporadicJobDeadline(  xTickCount );
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffba 	bl	8001054 <prvCheckSporadicJobDeadline>
					vTaskResume( *pxTCB->pxTaskHandle );
				}
			}
		#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

		return;
 80010e0:	e00d      	b.n	80010fe <prvSchedulerCheckTimingError+0x36>
					if( ( signed ) ( xTickCount - pxTCB->xLastWakeTime ) > 0 )
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dd02      	ble.n	80010f4 <prvSchedulerCheckTimingError+0x2c>
						pxTCB->xWorkIsDone = pdFALSE;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
					prvCheckDeadline( pxTCB, xTickCount );
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f7ff ff74 	bl	8000fe4 <prvCheckDeadline>
		return;
 80010fc:	bf00      	nop
	}
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <prvSchedulerFunction>:

	/* Function code for the scheduler task. */
	static void prvSchedulerFunction( void )
	{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
		for( ; ; )
		{
			#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
				#if( schedEDF_NAIVE == 1 )
					prvUpdatePrioritiesEDF();
 800110a:	f7ff fd69 	bl	8000be0 <prvUpdatePrioritiesEDF>
					}					
				#endif /* schedEDF_EFFICIENT */
			#endif /* schedSCHEDULING_POLICY_EDF */

			#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				TickType_t xTickCount = xTaskGetTickCount();
 800110e:	f002 fe9b 	bl	8003e48 <xTaskGetTickCount>
 8001112:	60b8      	str	r0, [r7, #8]
						pxTCB = &xTCBArray[ xIndex ];
						prvSchedulerCheckTimingError( xTickCount, pxTCB );
					}
				#elif( schedUSE_TCB_SORTED_LIST == 1 )
					#if( schedEDF_NAIVE == 1 )
						const ListItem_t *pxTCBListEndMarker = listGET_END_MARKER( pxTCBList );
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <prvSchedulerFunction+0x4c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3308      	adds	r3, #8
 800111a:	607b      	str	r3, [r7, #4]
						ListItem_t *pxTCBListItem = listGET_HEAD_ENTRY( pxTCBList );
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <prvSchedulerFunction+0x4c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	60fb      	str	r3, [r7, #12]
					#elif( schedEDF_EFFICIENT == 1)
						const ListItem_t *pxTCBListEndMarker = listGET_END_MARKER( pxTCBListAll );
						ListItem_t *pxTCBListItem = listGET_HEAD_ENTRY( pxTCBListAll );
					#endif /* schedEDF_EFFICIENT */
					while( pxTCBListItem != pxTCBListEndMarker )
 8001124:	e009      	b.n	800113a <prvSchedulerFunction+0x36>
					{
						pxTCB = listGET_LIST_ITEM_OWNER( pxTCBListItem);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	603b      	str	r3, [r7, #0]

						prvSchedulerCheckTimingError( xTickCount, pxTCB );
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	68b8      	ldr	r0, [r7, #8]
 8001130:	f7ff ffca 	bl	80010c8 <prvSchedulerCheckTimingError>

						pxTCBListItem = listGET_NEXT( pxTCBListItem );
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	60fb      	str	r3, [r7, #12]
					while( pxTCBListItem != pxTCBListEndMarker )
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d1f1      	bne.n	8001126 <prvSchedulerFunction+0x22>
					}
				#endif /* schedUSE_TCB_SORTED_LIST */
			
			#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

			ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001142:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001146:	2001      	movs	r0, #1
 8001148:	f003 f8e6 	bl	8004318 <ulTaskNotifyTake>
		{
 800114c:	e7dd      	b.n	800110a <prvSchedulerFunction+0x6>
 800114e:	bf00      	nop
 8001150:	200003dc 	.word	0x200003dc

08001154 <prvCreateSchedulerTask>:
		}
	}

	/* Creates the scheduler task. */
	static void prvCreateSchedulerTask( void )
	{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af02      	add	r7, sp, #8
		xTaskCreate( (TaskFunction_t) prvSchedulerFunction, "Scheduler", schedSCHEDULER_TASK_STACK_SIZE, NULL, schedSCHEDULER_PRIORITY, &xSchedulerHandle );
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <prvCreateSchedulerTask+0x24>)
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	2306      	movs	r3, #6
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <prvCreateSchedulerTask+0x28>)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <prvCreateSchedulerTask+0x2c>)
 800116c:	f002 fa0f 	bl	800358e <xTaskCreate>
	}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200003e8 	.word	0x200003e8
 800117c:	080060e8 	.word	0x080060e8
 8001180:	08001105 	.word	0x08001105

08001184 <prvGetNextAperiodicJob>:

#if( schedUSE_APERIODIC_JOBS == 1 )
	/* Returns AJCB of first aperiodic job stored in FIFO. Returns NULL if
	 * the FIFO is empty. */
	static AJCB_t *prvGetNextAperiodicJob( void )
	{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
		/* If FIFO is empty. */
		if( 0 == uxAperiodicJobCounter)
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <prvGetNextAperiodicJob+0x84>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <prvGetNextAperiodicJob+0x12>
		{
			return NULL;
 8001192:	2300      	movs	r3, #0
 8001194:	e034      	b.n	8001200 <prvGetNextAperiodicJob+0x7c>
		}

		AJCB_t *pxReturnValue = &xAJCBFifo[ xAJCBFifoHead ];
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <prvGetNextAperiodicJob+0x88>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <prvGetNextAperiodicJob+0x8c>)
 80011a4:	4413      	add	r3, r2
 80011a6:	607b      	str	r3, [r7, #4]

		/* Move FIFO head to next element in the queue. */
		xAJCBFifoHead++;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <prvGetNextAperiodicJob+0x88>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <prvGetNextAperiodicJob+0x88>)
 80011b0:	6013      	str	r3, [r2, #0]
		if( schedMAX_NUMBER_OF_APERIODIC_JOBS == xAJCBFifoHead )
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <prvGetNextAperiodicJob+0x88>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d102      	bne.n	80011c0 <prvGetNextAperiodicJob+0x3c>
		{
			xAJCBFifoHead = 0;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <prvGetNextAperiodicJob+0x88>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
		}
		
		#if( schedUSE_SPORADIC_JOBS == 1)
			/* Update maximum response time which is needed for acceptance test
			 * for sporadic jobs. */
			if( schedPOLLING_SERVER_MAX_EXECUTION_TIME >= pxReturnValue->xMaxExecTime )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d807      	bhi.n	80011d8 <prvGetNextAperiodicJob+0x54>
			{
				xAbsolutePreviousMaxResponseTime = xTaskGetTickCount() + schedPOLLING_SERVER_PERIOD * 2;
 80011c8:	f002 fe3e 	bl	8003e48 <xTaskGetTickCount>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <prvGetNextAperiodicJob+0x90>)
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e012      	b.n	80011fe <prvGetNextAperiodicJob+0x7a>
			}
			else
			{

				xAbsolutePreviousMaxResponseTime = xTaskGetTickCount() + schedPOLLING_SERVER_PERIOD +
 80011d8:	f002 fe36 	bl	8003e48 <xTaskGetTickCount>
 80011dc:	4602      	mov	r2, r0
						( pxReturnValue->xMaxExecTime / schedPOLLING_SERVER_MAX_EXECUTION_TIME + 1 ) * schedPOLLING_SERVER_PERIOD;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	490d      	ldr	r1, [pc, #52]	; (8001218 <prvGetNextAperiodicJob+0x94>)
 80011e4:	fba1 1303 	umull	r1, r3, r1, r3
 80011e8:	095b      	lsrs	r3, r3, #5
 80011ea:	3301      	adds	r3, #1
 80011ec:	f44f 7116 	mov.w	r1, #600	; 0x258
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
				xAbsolutePreviousMaxResponseTime = xTaskGetTickCount() + schedPOLLING_SERVER_PERIOD +
 80011f4:	4413      	add	r3, r2
 80011f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80011fa:	4a06      	ldr	r2, [pc, #24]	; (8001214 <prvGetNextAperiodicJob+0x90>)
 80011fc:	6013      	str	r3, [r2, #0]
			}
		#endif /* schedUSE_SPORADIC_JOBS */

		return pxReturnValue;
 80011fe:	687b      	ldr	r3, [r7, #4]
	}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000440 	.word	0x20000440
 800120c:	2000043c 	.word	0x2000043c
 8001210:	200003ec 	.word	0x200003ec
 8001214:	200004c0 	.word	0x200004c0
 8001218:	51eb851f 	.word	0x51eb851f

0800121c <prvGetNextSporadicJob>:

#if( schedUSE_SPORADIC_JOBS == 1 )
	/* Returns SJCB of first sporadic job stored in FIFO. Returns NULL if
	 * the FIFO is empty. */
	static SJCB_t *prvGetNextSporadicJob( void )
	{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
		/* If FIFO is empty. */
		if( 0 == uxSporadicJobCounter)
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <prvGetNextSporadicJob+0x4c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <prvGetNextSporadicJob+0x12>
		{
			return NULL;
 800122a:	2300      	movs	r3, #0
 800122c:	e015      	b.n	800125a <prvGetNextSporadicJob+0x3e>
		}

		SJCB_t *pxReturnValue = &xSJCBFifo[ xSJCBFifoHead ];
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <prvGetNextSporadicJob+0x50>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <prvGetNextSporadicJob+0x54>)
 800123c:	4413      	add	r3, r2
 800123e:	607b      	str	r3, [r7, #4]

		/* Move FIFO head to next element in the queue. */
		xSJCBFifoHead++;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <prvGetNextSporadicJob+0x50>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <prvGetNextSporadicJob+0x50>)
 8001248:	6013      	str	r3, [r2, #0]
		if( schedMAX_NUMBER_OF_SPORADIC_JOBS == xSJCBFifoHead )
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <prvGetNextSporadicJob+0x50>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b04      	cmp	r3, #4
 8001250:	d102      	bne.n	8001258 <prvGetNextSporadicJob+0x3c>
		{
			xSJCBFifoHead = 0;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <prvGetNextSporadicJob+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
		}
		
		return pxReturnValue;
 8001258:	687b      	ldr	r3, [r7, #4]
	}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200004bc 	.word	0x200004bc
 800126c:	200004b4 	.word	0x200004b4
 8001270:	20000444 	.word	0x20000444

08001274 <prvFindEmptyElementIndexSJCB>:

	/* Find index for an empty entry in xSJCBArray. Returns -1 if there is
	 * no empty entry. */
	static BaseType_t prvFindEmptyElementIndexSJCB( void )
	{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
		/* If the FIFO is full. */
		if( schedMAX_NUMBER_OF_SPORADIC_JOBS == uxSporadicJobCounter )
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <prvFindEmptyElementIndexSJCB+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d102      	bne.n	8001288 <prvFindEmptyElementIndexSJCB+0x14>
		{
			return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001286:	e00f      	b.n	80012a8 <prvFindEmptyElementIndexSJCB+0x34>
		}

		BaseType_t xReturnValue = xSJCBFifoTail;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <prvFindEmptyElementIndexSJCB+0x44>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	607b      	str	r3, [r7, #4]

		/* Extend the FIFO tail. */
		xSJCBFifoTail++;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <prvFindEmptyElementIndexSJCB+0x44>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <prvFindEmptyElementIndexSJCB+0x44>)
 8001296:	6013      	str	r3, [r2, #0]
		if( schedMAX_NUMBER_OF_SPORADIC_JOBS == xSJCBFifoTail )
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <prvFindEmptyElementIndexSJCB+0x44>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d102      	bne.n	80012a6 <prvFindEmptyElementIndexSJCB+0x32>
		{
			xSJCBFifoTail = 0;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <prvFindEmptyElementIndexSJCB+0x44>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
		}

		return xReturnValue;
 80012a6:	687b      	ldr	r3, [r7, #4]
	}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	200004bc 	.word	0x200004bc
 80012b8:	200004b8 	.word	0x200004b8

080012bc <prvAnalyzeSporadicJobSchedulability>:

	/* Called from xSchedulerSporadicJobCreate. Analyzes if the given sporadic
	 * job is (guaranteed) schedulable. Return pdTRUE if the sporadic job can
	 * meet it's deadline (with guarantee), otherwise pdFALSE. */
	static BaseType_t prvAnalyzeSporadicJobSchedulability( SJCB_t *pxSporadicJob, TickType_t xTickCount )
	{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	TickType_t xRelativeMaxResponseTime;
		if( xAbsolutePreviousMaxResponseTime > xTickCount )
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <prvAnalyzeSporadicJobSchedulability+0x80>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d205      	bcs.n	80012dc <prvAnalyzeSporadicJobSchedulability+0x20>
		{
			/* Using ICTOH method to calculate relative max response time. */
			xRelativeMaxResponseTime = xAbsolutePreviousMaxResponseTime - xTickCount;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <prvAnalyzeSporadicJobSchedulability+0x80>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e004      	b.n	80012e6 <prvAnalyzeSporadicJobSchedulability+0x2a>
		}
		else
		{
			xRelativeMaxResponseTime = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
			xAbsolutePreviousMaxResponseTime = 0;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <prvAnalyzeSporadicJobSchedulability+0x80>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
		}

		if( schedPOLLING_SERVER_MAX_EXECUTION_TIME >= pxSporadicJob->xMaxExecTime )
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d804      	bhi.n	80012f8 <prvAnalyzeSporadicJobSchedulability+0x3c>
		{
			xRelativeMaxResponseTime += schedPOLLING_SERVER_PERIOD * 2;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e00e      	b.n	8001316 <prvAnalyzeSporadicJobSchedulability+0x5a>
		}
		else
		{
			xRelativeMaxResponseTime += schedPOLLING_SERVER_PERIOD + ( pxSporadicJob->xMaxExecTime / schedPOLLING_SERVER_MAX_EXECUTION_TIME + 1 )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a10      	ldr	r2, [pc, #64]	; (8001340 <prvAnalyzeSporadicJobSchedulability+0x84>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001308:	fb03 f202 	mul.w	r2, r3, r2
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001314:	60fb      	str	r3, [r7, #12]
					* schedPOLLING_SERVER_PERIOD;
		}

		if( xRelativeMaxResponseTime < pxSporadicJob->xRelativeDeadline )
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d206      	bcs.n	800132e <prvAnalyzeSporadicJobSchedulability+0x72>
		{
			/* Accept job. */
			xAbsolutePreviousMaxResponseTime = xRelativeMaxResponseTime + xTickCount;
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <prvAnalyzeSporadicJobSchedulability+0x80>)
 8001328:	6013      	str	r3, [r2, #0]
			return pdTRUE;
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <prvAnalyzeSporadicJobSchedulability+0x74>
		}
		else
		{
			/* Do not accept job. */
			return pdFALSE;
 800132e:	2300      	movs	r3, #0
		}
	}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200004c0 	.word	0x200004c0
 8001340:	51eb851f 	.word	0x51eb851f

08001344 <xSchedulerSporadicJobCreate>:

	/* Creates a sporadic job if it is schedulable. Returns pdTRUE if the
	 * sporadic job can meet it's deadline (with guarantee) and created,
	 * otherwise pdFALSE. */
	BaseType_t xSchedulerSporadicJobCreate( TaskFunction_t pvTaskCode, const char *pcName, void *pvParameters, TickType_t xMaxExecTimeTick, TickType_t xDeadlineTick )
	{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
		taskENTER_CRITICAL();
 8001352:	f003 fa57 	bl	8004804 <vPortEnterCritical>
	BaseType_t xAccept = pdFALSE;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
	BaseType_t xIndex = prvFindEmptyElementIndexSJCB();
 800135a:	f7ff ff8b 	bl	8001274 <prvFindEmptyElementIndexSJCB>
 800135e:	63b8      	str	r0, [r7, #56]	; 0x38
	TickType_t xTickCount = xTaskGetTickCount();
 8001360:	f002 fd72 	bl	8003e48 <xTaskGetTickCount>
 8001364:	6378      	str	r0, [r7, #52]	; 0x34
		if( -1 == xIndex)
 8001366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800136c:	d103      	bne.n	8001376 <xSchedulerSporadicJobCreate+0x32>
		{
			/* The SJCBFifo is full. */
			taskEXIT_CRITICAL();
 800136e:	f003 fa79 	bl	8004864 <vPortExitCritical>
			return xAccept;
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	e053      	b.n	800141e <xSchedulerSporadicJobCreate+0xda>
		}
		configASSERT( uxSporadicJobCounter < schedMAX_NUMBER_OF_SPORADIC_JOBS );
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <xSchedulerSporadicJobCreate+0xe4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d90a      	bls.n	8001394 <xSchedulerSporadicJobCreate+0x50>
	__asm volatile
 800137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001382:	f383 8811 	msr	BASEPRI, r3
 8001386:	f3bf 8f6f 	isb	sy
 800138a:	f3bf 8f4f 	dsb	sy
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8001390:	bf00      	nop
 8001392:	e7fe      	b.n	8001392 <xSchedulerSporadicJobCreate+0x4e>
		SJCB_t *pxNewSJCB = &xSJCBFifo[ xIndex ];
 8001394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <xSchedulerSporadicJobCreate+0xe8>)
 80013a0:	4413      	add	r3, r2
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add item to SJCBList. */
		*pxNewSJCB = ( SJCB_t ) { .pvTaskCode = pvTaskCode, .pcName = pcName, .pvParameters = pvParameters, .xRelativeDeadline = xDeadlineTick,
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	461a      	mov	r2, r3
 80013a8:	2300      	movs	r3, #0
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	6053      	str	r3, [r2, #4]
 80013ae:	6093      	str	r3, [r2, #8]
 80013b0:	60d3      	str	r3, [r2, #12]
 80013b2:	6113      	str	r3, [r2, #16]
 80013b4:	6153      	str	r3, [r2, #20]
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	611a      	str	r2, [r3, #16]
			 .xMaxExecTime = xMaxExecTimeTick, .xExecTime = 0 };
		
		#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
			pxNewSJCB->xAbsoluteDeadline = pxNewSJCB->xRelativeDeadline + xTickCount;
 80013d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	441a      	add	r2, r3
 80013de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e0:	619a      	str	r2, [r3, #24]
		#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */

		xAccept = prvAnalyzeSporadicJobSchedulability( pxNewSJCB, xTickCount );
 80013e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013e6:	f7ff ff69 	bl	80012bc <prvAnalyzeSporadicJobSchedulability>
 80013ea:	63f8      	str	r0, [r7, #60]	; 0x3c
		if( pdTRUE == xAccept )
 80013ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d105      	bne.n	80013fe <xSchedulerSporadicJobCreate+0xba>
		{
			uxSporadicJobCounter++;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <xSchedulerSporadicJobCreate+0xe4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <xSchedulerSporadicJobCreate+0xe4>)
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e00c      	b.n	8001418 <xSchedulerSporadicJobCreate+0xd4>
		}
		else
		{
			if( xSJCBFifoTail == 0 )
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <xSchedulerSporadicJobCreate+0xec>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <xSchedulerSporadicJobCreate+0xca>
			{
				xSJCBFifoTail = schedMAX_NUMBER_OF_SPORADIC_JOBS - 1;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <xSchedulerSporadicJobCreate+0xec>)
 8001408:	2203      	movs	r2, #3
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e004      	b.n	8001418 <xSchedulerSporadicJobCreate+0xd4>
			}
			else
			{
				xSJCBFifoTail--;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <xSchedulerSporadicJobCreate+0xec>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <xSchedulerSporadicJobCreate+0xec>)
 8001416:	6013      	str	r3, [r2, #0]
			}
		}
		taskEXIT_CRITICAL();
 8001418:	f003 fa24 	bl	8004864 <vPortExitCritical>
		return xAccept;
 800141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	}
 800141e:	4618      	mov	r0, r3
 8001420:	3740      	adds	r7, #64	; 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200004bc 	.word	0x200004bc
 800142c:	20000444 	.word	0x20000444
 8001430:	200004b8 	.word	0x200004b8

08001434 <prvPollingServerFunction>:
#endif /* schedUSE_SPORADIC_JOBS */

#if( schedUSE_POLLING_SERVER == 1 )
	/* Function code for the Polling Server. */
	static void prvPollingServerFunction( void )
	{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
		for( ; ; )
		{
			#if( schedUSE_SPORADIC_JOBS == 1 )
				pxCurrentSporadicJob = prvGetNextSporadicJob();
 800143a:	f7ff feef 	bl	800121c <prvGetNextSporadicJob>
 800143e:	4603      	mov	r3, r0
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <prvPollingServerFunction+0x94>)
 8001442:	6013      	str	r3, [r2, #0]
				if( NULL == pxCurrentSporadicJob )
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <prvPollingServerFunction+0x94>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01c      	beq.n	8001486 <prvPollingServerFunction+0x52>
					#endif /* schedUSE_APERIODIC_JOBS */
				}
				else
				{
					/* Run sporadic job */
					pxCurrentSporadicJob->pvTaskCode( pxCurrentSporadicJob->pvParameters );
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <prvPollingServerFunction+0x94>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <prvPollingServerFunction+0x94>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	6892      	ldr	r2, [r2, #8]
 8001458:	4610      	mov	r0, r2
 800145a:	4798      	blx	r3

					SchedTCB_t *pxThisTask = ( SchedTCB_t * ) pvTaskGetThreadLocalStoragePointer( xTaskGetCurrentTaskHandle(), schedTHREAD_LOCAL_STORAGE_POINTER_INDEX );
 800145c:	f002 ff4c 	bl	80042f8 <xTaskGetCurrentTaskHandle>
 8001460:	4603      	mov	r3, r0
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fe5f 	bl	8004128 <pvTaskGetThreadLocalStoragePointer>
 800146a:	6078      	str	r0, [r7, #4]
					/* printf( "PS finished sporadic job tick %d abs deadline %d\r\n", xTaskGetTickCount(), pxThisTask->xAbsoluteDeadline, ); */
					uxSporadicJobCounter--;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <prvPollingServerFunction+0x98>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <prvPollingServerFunction+0x98>)
 8001474:	6013      	str	r3, [r2, #0]
					if( 0 == uxSporadicJobCounter )
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <prvPollingServerFunction+0x98>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11d      	bne.n	80014ba <prvPollingServerFunction+0x86>
					{
						xAbsolutePreviousMaxResponseTime = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <prvPollingServerFunction+0x9c>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
					}
					continue;
 8001484:	e019      	b.n	80014ba <prvPollingServerFunction+0x86>
				}
			#endif /* schedUSE_SPORADIC_JOBS */

			#if( schedUSE_APERIODIC_JOBS == 1 )
				pxCurrentAperiodicJob = prvGetNextAperiodicJob();
 8001486:	f7ff fe7d 	bl	8001184 <prvGetNextAperiodicJob>
 800148a:	4603      	mov	r3, r0
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <prvPollingServerFunction+0xa0>)
 800148e:	6013      	str	r3, [r2, #0]
				if( NULL == pxCurrentAperiodicJob )
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <prvPollingServerFunction+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <prvPollingServerFunction+0x8a>
					return;
				}
				else
				{
					/* Run aperiodic job */
					pxCurrentAperiodicJob->pvTaskCode( pxCurrentAperiodicJob->pvParameters );
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <prvPollingServerFunction+0xa0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <prvPollingServerFunction+0xa0>)
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	6892      	ldr	r2, [r2, #8]
 80014a4:	4610      	mov	r0, r2
 80014a6:	4798      	blx	r3
					uxAperiodicJobCounter--;
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <prvPollingServerFunction+0xa4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <prvPollingServerFunction+0xa4>)
 80014b0:	6013      	str	r3, [r2, #0]
					#if (schedUSE_SPORADIC_JOBS == 1 )
						xAbsolutePreviousMaxResponseTime = 0;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <prvPollingServerFunction+0x9c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e7bf      	b.n	800143a <prvPollingServerFunction+0x6>
					continue;
 80014ba:	bf00      	nop
				pxCurrentSporadicJob = prvGetNextSporadicJob();
 80014bc:	e7bd      	b.n	800143a <prvPollingServerFunction+0x6>
					return;
 80014be:	bf00      	nop
					#endif /* schedUSE_SPORADIC_JOBS */
				}
			#endif /* schedUSE_APERIODIC_JOBS */
		}
	}
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200004cc 	.word	0x200004cc
 80014cc:	200004bc 	.word	0x200004bc
 80014d0:	200004c0 	.word	0x200004c0
 80014d4:	200004c8 	.word	0x200004c8
 80014d8:	20000440 	.word	0x20000440

080014dc <prvPollingServerCreate>:

	/* Creates Polling Server as a periodic task. */
	void prvPollingServerCreate( void )
	{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b098      	sub	sp, #96	; 0x60
 80014e0:	af00      	add	r7, sp, #0
		taskENTER_CRITICAL();
 80014e2:	f003 f98f 	bl	8004804 <vPortEnterCritical>
			BaseType_t xIndex = prvFindEmptyElementIndexTCB();
			configASSERT( xTaskCounter < schedMAX_NUMBER_OF_PERIODIC_TASKS );
			configASSERT( xIndex != -1 );
			pxNewTCB = &xTCBArray[ xIndex ];
		#elif( schedUSE_TCB_SORTED_LIST == 1 )
			pxNewTCB = pvPortMalloc( sizeof( SchedTCB_t ) );
 80014e6:	2058      	movs	r0, #88	; 0x58
 80014e8:	f003 faae 	bl	8004a48 <pvPortMalloc>
 80014ec:	65f8      	str	r0, [r7, #92]	; 0x5c
		#endif /* schedUSE_TCB_ARRAY */

		/* Initialize item. */
		*pxNewTCB = ( SchedTCB_t ) { .pvTaskCode = (TaskFunction_t) prvPollingServerFunction, .pcName = "PS", .uxStackDepth = schedPOLLING_SERVER_STACK_SIZE, .pvParameters = NULL,
 80014ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f0:	4618      	mov	r0, r3
 80014f2:	2358      	movs	r3, #88	; 0x58
 80014f4:	461a      	mov	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f003 fdb3 	bl	8005062 <memset>
 80014fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <prvPollingServerCreate+0x7c>)
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001504:	4a15      	ldr	r2, [pc, #84]	; (800155c <prvPollingServerCreate+0x80>)
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <prvPollingServerCreate+0x84>)
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001518:	f44f 7216 	mov.w	r2, #600	; 0x258
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001520:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	2264      	movs	r2, #100	; 0x64
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
 800152c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152e:	2201      	movs	r2, #1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
 8001532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001534:	2201      	movs	r2, #1
 8001536:	655a      	str	r2, [r3, #84]	; 0x54
			.pxTaskHandle = &xPollingServerHandle, .xReleaseTime = 0, .xPeriod = schedPOLLING_SERVER_PERIOD, .xMaxExecTime = schedPOLLING_SERVER_MAX_EXECUTION_TIME,
			.xRelativeDeadline = schedPOLLING_SERVER_DEADLINE, .xWorkIsDone = pdTRUE, .xExecTime = 0, .xIsPeriodicServer = pdTRUE };
		#if( schedUSE_TCB_ARRAY == 1 )
			pxNewTCB->xInUse = pdTRUE;
		#elif( schedUSE_TCB_SORTED_LIST == 1 )
			pxNewTCB->xAbsoluteDeadline = pxNewTCB->xRelativeDeadline + xSystemStartTime;
 8001538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <prvPollingServerCreate+0x88>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	441a      	add	r2, r3
 8001542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001544:	621a      	str	r2, [r3, #32]
			xTaskCounter++;
		#elif( schedUSE_TCB_SORTED_LIST == 1 )
			#if( schedEDF_EFFICIENT == 1 )
				pxNewTCB->uxPriority = schedPRIORITY_NOT_RUNNING;
			#endif /* schedEDF_EFFICIENT */
			prvAddTCBToList( pxNewTCB );
 8001546:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001548:	f7ff fb16 	bl	8000b78 <prvAddTCBToList>
		#endif /* schedUSE_TCB_SORTED_LIST */
			taskEXIT_CRITICAL();
 800154c:	f003 f98a 	bl	8004864 <vPortExitCritical>
	}
 8001550:	bf00      	nop
 8001552:	3760      	adds	r7, #96	; 0x60
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08001435 	.word	0x08001435
 800155c:	080060f4 	.word	0x080060f4
 8001560:	200004c4 	.word	0x200004c4
 8001564:	2000039c 	.word	0x2000039c

08001568 <prvWakeScheduler>:
#endif /* schedUSE_POLLING_SERVER */

#if( schedUSE_SCHEDULER_TASK == 1 )
	/* Wakes up (context switches to) the scheduler task. */
	static void prvWakeScheduler( void )
	{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
		vTaskNotifyGiveFromISR( xSchedulerHandle, &xHigherPriorityTaskWoken );
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <prvWakeScheduler+0x34>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1d3a      	adds	r2, r7, #4
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f002 ff1a 	bl	80043b0 <vTaskNotifyGiveFromISR>
		schedYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <prvWakeScheduler+0x2a>
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <prvWakeScheduler+0x38>)
 8001584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f3bf 8f4f 	dsb	sy
 800158e:	f3bf 8f6f 	isb	sy
	}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003e8 	.word	0x200003e8
 80015a0:	e000ed04 	.word	0xe000ed04

080015a4 <vSchedulerInit>:
	}
#endif /* schedUSE_SCHEDULER_TASK */

/* This function must be called before any other function call from this module. */
void vSchedulerInit( void )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	#if( schedUSE_TCB_ARRAY == 1 )
		prvInitTCBArray();
	#elif( schedUSE_TCB_SORTED_LIST == 1 )
		#if( schedEDF_NAIVE == 1 )
			vListInitialise( &xTCBList );
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <vSchedulerInit+0x2c>)
 80015aa:	f001 fedf 	bl	800336c <vListInitialise>
			vListInitialise( &xTCBTempList );
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <vSchedulerInit+0x30>)
 80015b0:	f001 fedc 	bl	800336c <vListInitialise>
			vListInitialise( &xTCBOverflowedList );
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <vSchedulerInit+0x34>)
 80015b6:	f001 fed9 	bl	800336c <vListInitialise>
			pxTCBList = &xTCBList;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <vSchedulerInit+0x38>)
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <vSchedulerInit+0x2c>)
 80015be:	601a      	str	r2, [r3, #0]
			pxTCBTempList = &xTCBTempList;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <vSchedulerInit+0x3c>)
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <vSchedulerInit+0x30>)
 80015c4:	601a      	str	r2, [r3, #0]
			pxTCBOverflowedList = &xTCBOverflowedList;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <vSchedulerInit+0x40>)
 80015c8:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <vSchedulerInit+0x34>)
 80015ca:	601a      	str	r2, [r3, #0]
			pxTCBBlockedList = &xTCBBlockedList;
			pxTCBReadyList = &xTCBReadyList;
			pxTCBOverflowedReadyList = &xTCBOverflowedReadyList;
		#endif /* schedEDF_NAIVE */
	#endif /* schedUSE_TCB_ARRAY */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200003a0 	.word	0x200003a0
 80015d4:	200003b4 	.word	0x200003b4
 80015d8:	200003c8 	.word	0x200003c8
 80015dc:	200003dc 	.word	0x200003dc
 80015e0:	200003e0 	.word	0x200003e0
 80015e4:	200003e4 	.word	0x200003e4

080015e8 <vSchedulerStart>:

/* Starts scheduling tasks. All periodic tasks (including polling server) must
 * have been created with API function before calling this function. */
void vSchedulerStart( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	#if( schedUSE_POLLING_SERVER == 1 )
		prvPollingServerCreate();
 80015ec:	f7ff ff76 	bl	80014dc <prvPollingServerCreate>
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		prvSetFixedPriorities();
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		prvInitEDF();
 80015f0:	f7ff fc74 	bl	8000edc <prvInitEDF>
	#endif /* schedSCHEDULING_POLICY */

	#if( schedUSE_SCHEDULER_TASK == 1 )
		prvCreateSchedulerTask();
 80015f4:	f7ff fdae 	bl	8001154 <prvCreateSchedulerTask>
	#endif /* schedUSE_SCHEDULER_TASK */

	prvCreateAllTasks();
 80015f8:	f7ff fc28 	bl	8000e4c <prvCreateAllTasks>

	xSystemStartTime = xTaskGetTickCount();
 80015fc:	f002 fc24 	bl	8003e48 <xTaskGetTickCount>
 8001600:	4603      	mov	r3, r0
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <vSchedulerStart+0x28>)
 8001604:	6013      	str	r3, [r2, #0]
	vTaskStartScheduler();
 8001606:	f002 fb0b 	bl	8003c20 <vTaskStartScheduler>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000039c 	.word	0x2000039c

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_MspInit+0x54>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_MspInit+0x54>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_MspInit+0x54>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_MspInit+0x54>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_MspInit+0x54>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_MspInit+0x54>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f000 fa9f 	bl	8001b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_UART_MspInit+0x8c>)
 80016e2:	f000 fa85 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_InitTick+0xd0>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <HAL_InitTick+0xd0>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6453      	str	r3, [r2, #68]	; 0x44
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_InitTick+0xd0>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f001 f892 	bl	800285c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001738:	f001 f87c 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800173c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <HAL_InitTick+0xd4>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	3b01      	subs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_InitTick+0xd8>)
 800174e:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_InitTick+0xdc>)
 8001750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_InitTick+0xd8>)
 8001754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001758:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_InitTick+0xd8>)
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_InitTick+0xd8>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_InitTick+0xd8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_InitTick+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001772:	4818      	ldr	r0, [pc, #96]	; (80017d4 <HAL_InitTick+0xd8>)
 8001774:	f001 f8a4 	bl	80028c0 <HAL_TIM_Base_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800177e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11b      	bne.n	80017be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001786:	4813      	ldr	r0, [pc, #76]	; (80017d4 <HAL_InitTick+0xd8>)
 8001788:	f001 f8f4 	bl	8002974 <HAL_TIM_Base_Start_IT>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001796:	2b00      	cmp	r3, #0
 8001798:	d111      	bne.n	80017be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800179a:	2019      	movs	r0, #25
 800179c:	f000 fa1a 	bl	8001bd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	d808      	bhi.n	80017b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017a6:	2200      	movs	r2, #0
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	2019      	movs	r0, #25
 80017ac:	f000 f9f6 	bl	8001b9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_InitTick+0xe0>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e002      	b.n	80017be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3730      	adds	r7, #48	; 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	200004d0 	.word	0x200004d0
 80017d8:	40010000 	.word	0x40010000
 80017dc:	20000004 	.word	0x20000004

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001812:	f001 f911 	bl	8002a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200004d0 	.word	0x200004d0

08001820 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e00a      	b.n	8001848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001832:	f3af 8000 	nop.w
 8001836:	4601      	mov	r1, r0
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	b2ca      	uxtb	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf0      	blt.n	8001832 <_read+0x12>
	}

return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_close>:
	}
	return len;
}

int _close(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	605a      	str	r2, [r3, #4]
	return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_isatty>:

int _isatty(int file)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	return 1;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
	return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f003 fa92 	bl	8004e1c <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20018000 	.word	0x20018000
 8001924:	00000400 	.word	0x00000400
 8001928:	20000518 	.word	0x20000518
 800192c:	20004288 	.word	0x20004288

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <SystemInit+0x20>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <SystemInit+0x20>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800198c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800195a:	490e      	ldr	r1, [pc, #56]	; (8001994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001970:	4c0b      	ldr	r4, [pc, #44]	; (80019a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800197e:	f7ff ffd7 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f003 fb47 	bl	8005014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7fe feed 	bl	8000764 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800198c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001998:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 800199c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019a0:	20004284 	.word	0x20004284

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_Init+0x40>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_Init+0x40>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x40>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f8d8 	bl	8001b86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f7ff fe90 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fe1a 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000051c 	.word	0x2000051c

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000051c 	.word	0x2000051c

08001a2c <__NVIC_SetPriorityGrouping>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff4c 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bae:	f7ff ff61 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	6978      	ldr	r0, [r7, #20]
 8001bba:	f7ff ffb1 	bl	8001b20 <NVIC_EncodePriority>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff80 	bl	8001acc <__NVIC_SetPriority>
}
 8001bcc:	bf00      	nop
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff54 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e159      	b.n	8001ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8148 	bne.w	8001eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a2 	beq.w	8001eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x202>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	; (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1fe>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1fa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <HAL_GPIO_Init+0x2fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1f6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1f2>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f aea2 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e267      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d075      	beq.n	8002036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d00c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d112      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b7e      	ldr	r3, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05b      	beq.n	8002034 <HAL_RCC_OscConfig+0x108>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d157      	bne.n	8002034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e242      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x74>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b70      	ldr	r3, [pc, #448]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6f      	ldr	r2, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6c      	ldr	r2, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fc4:	4b69      	ldr	r3, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a68      	ldr	r2, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fd16 	bl	8001a14 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fd12 	bl	8001a14 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e207      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0xc0>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fd02 	bl	8001a14 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fcfe 	bl	8001a14 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1f3      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0xe8>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002056:	2b08      	cmp	r3, #8
 8002058:	d11c      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_RCC_OscConfig+0x240>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d001      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1c7      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_RCC_OscConfig+0x240>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	e03a      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x244>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff fcb7 	bl	8001a14 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020aa:	f7ff fcb3 	bl	8001a14 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1a8      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4925      	ldr	r1, [pc, #148]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_OscConfig+0x244>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fc96 	bl	8001a14 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ec:	f7ff fc92 	bl	8001a14 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e187      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d036      	beq.n	8002184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_RCC_OscConfig+0x248>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff fc76 	bl	8001a14 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fc72 	bl	8001a14 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e167      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x200>
 800214a:	e01b      	b.n	8002184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_OscConfig+0x248>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fc5f 	bl	8001a14 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00e      	b.n	8002178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fc5b 	bl	8001a14 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d907      	bls.n	8002178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e150      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800216c:	40023800 	.word	0x40023800
 8002170:	42470000 	.word	0x42470000
 8002174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ea      	bne.n	800215a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8097 	beq.w	80022c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b7d      	ldr	r3, [pc, #500]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a7c      	ldr	r2, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b7a      	ldr	r3, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a73      	ldr	r2, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7ff fc1b 	bl	8001a14 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7ff fc17 	bl	8001a14 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e10c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x2ea>
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x30c>
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a5e      	ldr	r2, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a5b      	ldr	r2, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	; 0x70
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a54      	ldr	r2, [pc, #336]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fbdc 	bl	8001a14 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fbd8 	bl	8001a14 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0cb      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ee      	beq.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff fbc6 	bl	8001a14 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff fbc2 	bl	8001a14 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0b5      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ee      	bne.n	800228c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a1 	beq.w	800240c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ca:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d05c      	beq.n	8002390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d141      	bne.n	8002362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fb96 	bl	8001a14 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fb92 	bl	8001a14 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e087      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff fb6b 	bl	8001a14 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff fb67 	bl	8001a14 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e05c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x416>
 8002360:	e054      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fb54 	bl	8001a14 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff fb50 	bl	8001a14 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e045      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e038      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d028      	beq.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d121      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cc      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90c      	bls.n	8002458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d044      	beq.n	800253c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e067      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4934      	ldr	r1, [pc, #208]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7ff fa82 	bl	8001a14 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff fa7e 	bl	8001a14 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d20c      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f821 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f89a 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08006100 	.word	0x08006100
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b094      	sub	sp, #80	; 0x50
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002600:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d00d      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x40>
 800260c:	2b08      	cmp	r3, #8
 800260e:	f200 80e1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x3a>
 800261a:	e0db      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002620:	e0db      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002626:	e0d8      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002632:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
 8002648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
 8002656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	f04f 0000 	mov.w	r0, #0
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	0159      	lsls	r1, r3, #5
 8002668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266c:	0150      	lsls	r0, r2, #5
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4621      	mov	r1, r4
 8002674:	1a51      	subs	r1, r2, r1
 8002676:	6139      	str	r1, [r7, #16]
 8002678:	4629      	mov	r1, r5
 800267a:	eb63 0301 	sbc.w	r3, r3, r1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800268c:	4659      	mov	r1, fp
 800268e:	018b      	lsls	r3, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002696:	4651      	mov	r1, sl
 8002698:	018a      	lsls	r2, r1, #6
 800269a:	4651      	mov	r1, sl
 800269c:	ebb2 0801 	subs.w	r8, r2, r1
 80026a0:	4659      	mov	r1, fp
 80026a2:	eb63 0901 	sbc.w	r9, r3, r1
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ba:	4690      	mov	r8, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	eb18 0303 	adds.w	r3, r8, r3
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	462b      	mov	r3, r5
 80026c8:	eb49 0303 	adc.w	r3, r9, r3
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026da:	4629      	mov	r1, r5
 80026dc:	024b      	lsls	r3, r1, #9
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e4:	4621      	mov	r1, r4
 80026e6:	024a      	lsls	r2, r1, #9
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026f8:	f7fd fdc2 	bl	8000280 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002704:	e058      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	2200      	movs	r2, #0
 800270e:	4618      	mov	r0, r3
 8002710:	4611      	mov	r1, r2
 8002712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	0159      	lsls	r1, r3, #5
 800272e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002732:	0150      	lsls	r0, r2, #5
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4641      	mov	r1, r8
 800273a:	ebb2 0a01 	subs.w	sl, r2, r1
 800273e:	4649      	mov	r1, r9
 8002740:	eb63 0b01 	sbc.w	fp, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002758:	ebb2 040a 	subs.w	r4, r2, sl
 800275c:	eb63 050b 	sbc.w	r5, r3, fp
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	464b      	mov	r3, r9
 800277c:	eb45 0303 	adc.w	r3, r5, r3
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a2:	2200      	movs	r2, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	61fa      	str	r2, [r7, #28]
 80027a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ac:	f7fd fd68 	bl	8000280 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4613      	mov	r3, r2
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3750      	adds	r7, #80	; 0x50
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08006110 	.word	0x08006110

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08006110 	.word	0x08006110

0800285c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	220f      	movs	r2, #15
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCC_GetClockConfig+0x60>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0207 	and.w	r2, r3, #7
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e041      	b.n	8002956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f839 	bl	800295e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 f9ca 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e044      	b.n	8002a16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_TIM_Base_Start_IT+0xb0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x6c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d013      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x6c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_TIM_Base_Start_IT+0xb4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x6c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_Start_IT+0xb8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x6c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_TIM_Base_Start_IT+0xbc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x6c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_TIM_Base_Start_IT+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d111      	bne.n	8002a04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d010      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a02:	e007      	b.n	8002a14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	40000c00 	.word	0x40000c00
 8002a34:	40014000 	.word	0x40014000

08002a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0202 	mvn.w	r2, #2
 8002a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8ee 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8e0 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8f1 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0204 	mvn.w	r2, #4
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8c4 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8b6 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8c7 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0208 	mvn.w	r2, #8
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f89a 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f88c 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f89d 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0210 	mvn.w	r2, #16
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2208      	movs	r2, #8
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f870 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f862 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f873 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0201 	mvn.w	r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ffc6 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8e2 	bl	8002dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f838 	bl	8002c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0220 	mvn.w	r2, #32
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8ac 	bl	8002d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a31      	ldr	r2, [pc, #196]	; (8002d80 <TIM_Base_SetConfig+0xe8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <TIM_Base_SetConfig+0xec>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <TIM_Base_SetConfig+0xf0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <TIM_Base_SetConfig+0xe8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <TIM_Base_SetConfig+0xec>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <TIM_Base_SetConfig+0xf0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <TIM_Base_SetConfig+0xf4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <TIM_Base_SetConfig+0xf8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <TIM_Base_SetConfig+0xfc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <TIM_Base_SetConfig+0xe4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d103      	bne.n	8002d68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	615a      	str	r2, [r3, #20]
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40014400 	.word	0x40014400
 8002d94:	40014800 	.word	0x40014800

08002d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e03f      	b.n	8002e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fc40 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f829 	bl	8002e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b0c0      	sub	sp, #256	; 0x100
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	68d9      	ldr	r1, [r3, #12]
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	ea40 0301 	orr.w	r3, r0, r1
 8002e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eb4:	f021 010c 	bic.w	r1, r1, #12
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	6999      	ldr	r1, [r3, #24]
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	ea40 0301 	orr.w	r3, r0, r1
 8002ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b8f      	ldr	r3, [pc, #572]	; (8003128 <UART_SetConfig+0x2cc>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d005      	beq.n	8002efc <UART_SetConfig+0xa0>
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	; (800312c <UART_SetConfig+0x2d0>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d104      	bne.n	8002f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fc9a 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8002f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f04:	e003      	b.n	8002f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7ff fc81 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8002f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f18:	f040 810c 	bne.w	8003134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f36:	415b      	adcs	r3, r3
 8002f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f3e:	4621      	mov	r1, r4
 8002f40:	eb12 0801 	adds.w	r8, r2, r1
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb43 0901 	adc.w	r9, r3, r1
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5e:	4690      	mov	r8, r2
 8002f60:	4699      	mov	r9, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	eb18 0303 	adds.w	r3, r8, r3
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	eb49 0303 	adc.w	r3, r9, r3
 8002f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	18db      	adds	r3, r3, r3
 8002f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f90:	4613      	mov	r3, r2
 8002f92:	eb42 0303 	adc.w	r3, r2, r3
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fa0:	f7fd f96e 	bl	8000280 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <UART_SetConfig+0x2d4>)
 8002faa:	fba3 2302 	umull	r2, r3, r3, r2
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	011c      	lsls	r4, r3, #4
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	1891      	adds	r1, r2, r2
 8002fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fcc:	415b      	adcs	r3, r3
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fda:	4649      	mov	r1, r9
 8002fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff4:	4692      	mov	sl, r2
 8002ff6:	469b      	mov	fp, r3
 8002ff8:	4643      	mov	r3, r8
 8002ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8002ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003002:	464b      	mov	r3, r9
 8003004:	eb4b 0303 	adc.w	r3, fp, r3
 8003008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800301c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003020:	460b      	mov	r3, r1
 8003022:	18db      	adds	r3, r3, r3
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
 8003026:	4613      	mov	r3, r2
 8003028:	eb42 0303 	adc.w	r3, r2, r3
 800302c:	647b      	str	r3, [r7, #68]	; 0x44
 800302e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003036:	f7fd f923 	bl	8000280 <__aeabi_uldivmod>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4611      	mov	r1, r2
 8003040:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <UART_SetConfig+0x2d4>)
 8003042:	fba3 2301 	umull	r2, r3, r3, r1
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2264      	movs	r2, #100	; 0x64
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	1acb      	subs	r3, r1, r3
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <UART_SetConfig+0x2d4>)
 8003058:	fba3 2302 	umull	r2, r3, r3, r2
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003064:	441c      	add	r4, r3
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003080:	415b      	adcs	r3, r3
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003088:	4641      	mov	r1, r8
 800308a:	1851      	adds	r1, r2, r1
 800308c:	6339      	str	r1, [r7, #48]	; 0x30
 800308e:	4649      	mov	r1, r9
 8003090:	414b      	adcs	r3, r1
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030a0:	4659      	mov	r1, fp
 80030a2:	00cb      	lsls	r3, r1, #3
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030aa:	4651      	mov	r1, sl
 80030ac:	00ca      	lsls	r2, r1, #3
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	4642      	mov	r2, r8
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030bc:	464b      	mov	r3, r9
 80030be:	460a      	mov	r2, r1
 80030c0:	eb42 0303 	adc.w	r3, r2, r3
 80030c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030dc:	460b      	mov	r3, r1
 80030de:	18db      	adds	r3, r3, r3
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e2:	4613      	mov	r3, r2
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030f2:	f7fd f8c5 	bl	8000280 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <UART_SetConfig+0x2d4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <UART_SetConfig+0x2d4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 0207 	and.w	r2, r3, #7
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003124:	e105      	b.n	8003332 <UART_SetConfig+0x4d6>
 8003126:	bf00      	nop
 8003128:	40011000 	.word	0x40011000
 800312c:	40011400 	.word	0x40011400
 8003130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003138:	2200      	movs	r2, #0
 800313a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800313e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003146:	4642      	mov	r2, r8
 8003148:	464b      	mov	r3, r9
 800314a:	1891      	adds	r1, r2, r2
 800314c:	6239      	str	r1, [r7, #32]
 800314e:	415b      	adcs	r3, r3
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003156:	4641      	mov	r1, r8
 8003158:	1854      	adds	r4, r2, r1
 800315a:	4649      	mov	r1, r9
 800315c:	eb43 0501 	adc.w	r5, r3, r1
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	00eb      	lsls	r3, r5, #3
 800316a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800316e:	00e2      	lsls	r2, r4, #3
 8003170:	4614      	mov	r4, r2
 8003172:	461d      	mov	r5, r3
 8003174:	4643      	mov	r3, r8
 8003176:	18e3      	adds	r3, r4, r3
 8003178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800317c:	464b      	mov	r3, r9
 800317e:	eb45 0303 	adc.w	r3, r5, r3
 8003182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031a2:	4629      	mov	r1, r5
 80031a4:	008b      	lsls	r3, r1, #2
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ac:	4621      	mov	r1, r4
 80031ae:	008a      	lsls	r2, r1, #2
 80031b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031b4:	f7fd f864 	bl	8000280 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4b60      	ldr	r3, [pc, #384]	; (8003340 <UART_SetConfig+0x4e4>)
 80031be:	fba3 2302 	umull	r2, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	011c      	lsls	r4, r3, #4
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	1891      	adds	r1, r2, r2
 80031de:	61b9      	str	r1, [r7, #24]
 80031e0:	415b      	adcs	r3, r3
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e8:	4641      	mov	r1, r8
 80031ea:	1851      	adds	r1, r2, r1
 80031ec:	6139      	str	r1, [r7, #16]
 80031ee:	4649      	mov	r1, r9
 80031f0:	414b      	adcs	r3, r1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003200:	4659      	mov	r1, fp
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4651      	mov	r1, sl
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4642      	mov	r2, r8
 8003216:	189b      	adds	r3, r3, r2
 8003218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800321c:	464b      	mov	r3, r9
 800321e:	460a      	mov	r2, r1
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	67bb      	str	r3, [r7, #120]	; 0x78
 8003232:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003240:	4649      	mov	r1, r9
 8003242:	008b      	lsls	r3, r1, #2
 8003244:	4641      	mov	r1, r8
 8003246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324a:	4641      	mov	r1, r8
 800324c:	008a      	lsls	r2, r1, #2
 800324e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003252:	f7fd f815 	bl	8000280 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <UART_SetConfig+0x4e4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a34      	ldr	r2, [pc, #208]	; (8003340 <UART_SetConfig+0x4e4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327a:	441c      	add	r4, r3
 800327c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003280:	2200      	movs	r2, #0
 8003282:	673b      	str	r3, [r7, #112]	; 0x70
 8003284:	677a      	str	r2, [r7, #116]	; 0x74
 8003286:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800328a:	4642      	mov	r2, r8
 800328c:	464b      	mov	r3, r9
 800328e:	1891      	adds	r1, r2, r2
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	415b      	adcs	r3, r3
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800329a:	4641      	mov	r1, r8
 800329c:	1851      	adds	r1, r2, r1
 800329e:	6039      	str	r1, [r7, #0]
 80032a0:	4649      	mov	r1, r9
 80032a2:	414b      	adcs	r3, r1
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032b2:	4659      	mov	r1, fp
 80032b4:	00cb      	lsls	r3, r1, #3
 80032b6:	4651      	mov	r1, sl
 80032b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032bc:	4651      	mov	r1, sl
 80032be:	00ca      	lsls	r2, r1, #3
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	4642      	mov	r2, r8
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80032cc:	464b      	mov	r3, r9
 80032ce:	460a      	mov	r2, r1
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	663b      	str	r3, [r7, #96]	; 0x60
 80032e0:	667a      	str	r2, [r7, #100]	; 0x64
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032ee:	4649      	mov	r1, r9
 80032f0:	008b      	lsls	r3, r1, #2
 80032f2:	4641      	mov	r1, r8
 80032f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f8:	4641      	mov	r1, r8
 80032fa:	008a      	lsls	r2, r1, #2
 80032fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003300:	f7fc ffbe 	bl	8000280 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <UART_SetConfig+0x4e4>)
 800330a:	fba3 1302 	umull	r1, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2164      	movs	r1, #100	; 0x64
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a08      	ldr	r2, [pc, #32]	; (8003340 <UART_SetConfig+0x4e4>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4422      	add	r2, r4
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	bf00      	nop
 8003334:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003338:	46bd      	mov	sp, r7
 800333a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333e:	bf00      	nop
 8003340:	51eb851f 	.word	0x51eb851f

08003344 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <osDelay+0x16>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	e000      	b.n	800335c <osDelay+0x18>
 800335a:	2301      	movs	r3, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fb81 	bl	8003a64 <vTaskDelay>
  
  return osOK;
 8003362:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0208 	add.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0208 	add.w	r2, r3, #8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f103 0208 	add.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003424:	d103      	bne.n	800342e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e00c      	b.n	8003448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3308      	adds	r3, #8
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e002      	b.n	800343c <vListInsert+0x2e>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d2f6      	bcs.n	8003436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6852      	ldr	r2, [r2, #4]
 80034a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d103      	bne.n	80034b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1e5a      	subs	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08e      	sub	sp, #56	; 0x38
 80034d8:	af04      	add	r7, sp, #16
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xTaskCreateStatic+0x46>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61fb      	str	r3, [r7, #28]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800351a:	23b8      	movs	r3, #184	; 0xb8
 800351c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2bb8      	cmp	r3, #184	; 0xb8
 8003522:	d00a      	beq.n	800353a <xTaskCreateStatic+0x66>
	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	61bb      	str	r3, [r7, #24]
}
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800353a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01e      	beq.n	8003580 <xTaskCreateStatic+0xac>
 8003542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003550:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2202      	movs	r2, #2
 8003556:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800355a:	2300      	movs	r3, #0
 800355c:	9303      	str	r3, [sp, #12]
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9302      	str	r3, [sp, #8]
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f850 	bl	8003618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800357a:	f000 f8fb 	bl	8003774 <prvAddNewTaskToReadyList>
 800357e:	e001      	b.n	8003584 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003584:	697b      	ldr	r3, [r7, #20]
	}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	; 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800358e:	b580      	push	{r7, lr}
 8003590:	b08c      	sub	sp, #48	; 0x30
 8003592:	af04      	add	r7, sp, #16
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fa50 	bl	8004a48 <pvPortMalloc>
 80035a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035b0:	20b8      	movs	r0, #184	; 0xb8
 80035b2:	f001 fa49 	bl	8004a48 <pvPortMalloc>
 80035b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
 80035c4:	e005      	b.n	80035d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f001 fb0a 	bl	8004be0 <vPortFree>
 80035cc:	e001      	b.n	80035d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d017      	beq.n	8003608 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9303      	str	r3, [sp, #12]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	9302      	str	r3, [sp, #8]
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f80e 	bl	8003618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035fc:	69f8      	ldr	r0, [r7, #28]
 80035fe:	f000 f8b9 	bl	8003774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003602:	2301      	movs	r3, #1
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e002      	b.n	800360e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800360c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800360e:	69bb      	ldr	r3, [r7, #24]
	}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003630:	3b01      	subs	r3, #1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f023 0307 	bic.w	r3, r3, #7
 800363e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <prvInitialiseNewTask+0x48>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	617b      	str	r3, [r7, #20]
}
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01f      	beq.n	80036a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e012      	b.n	8003692 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	7819      	ldrb	r1, [r3, #0]
 8003674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	3334      	adds	r3, #52	; 0x34
 800367c:	460a      	mov	r2, r1
 800367e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	3301      	adds	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	d9e9      	bls.n	800366c <prvInitialiseNewTask+0x54>
 8003698:	e000      	b.n	800369c <prvInitialiseNewTask+0x84>
			{
				break;
 800369a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a4:	e003      	b.n	80036ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d901      	bls.n	80036b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036b4:	2306      	movs	r3, #6
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fe6c 	bl	80033ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	3318      	adds	r3, #24
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fe67 	bl	80033ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	f1c3 0207 	rsb	r2, r3, #7
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e009      	b.n	800370e <prvInitialiseNewTask+0xf6>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 80036fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3312      	adds	r3, #18
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	3301      	adds	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f2      	beq.n	80036fa <prvInitialiseNewTask+0xe2>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	2200      	movs	r2, #0
 8003720:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3350      	adds	r3, #80	; 0x50
 8003728:	2260      	movs	r2, #96	; 0x60
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fc98 	bl	8005062 <memset>
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <prvInitialiseNewTask+0x150>)
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <prvInitialiseNewTask+0x154>)
 800373c:	659a      	str	r2, [r3, #88]	; 0x58
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <prvInitialiseNewTask+0x158>)
 8003742:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	69b8      	ldr	r0, [r7, #24]
 800374a:	f000 ff2b 	bl	80045a4 <pxPortInitialiseStack>
 800374e:	4602      	mov	r2, r0
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <prvInitialiseNewTask+0x148>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08006138 	.word	0x08006138
 800376c:	08006158 	.word	0x08006158
 8003770:	08006118 	.word	0x08006118

08003774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800377c:	f001 f842 	bl	8004804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <prvAddNewTaskToReadyList+0xb8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a29      	ldr	r2, [pc, #164]	; (800382c <prvAddNewTaskToReadyList+0xb8>)
 8003788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <prvAddNewTaskToReadyList+0xbc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <prvAddNewTaskToReadyList+0xbc>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <prvAddNewTaskToReadyList+0xb8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d110      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037a0:	f000 fce8 	bl	8004174 <prvInitialiseTaskLists>
 80037a4:	e00d      	b.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037a6:	4b23      	ldr	r3, [pc, #140]	; (8003834 <prvAddNewTaskToReadyList+0xc0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <prvAddNewTaskToReadyList+0xbc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d802      	bhi.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <prvAddNewTaskToReadyList+0xbc>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <prvAddNewTaskToReadyList+0xc4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <prvAddNewTaskToReadyList+0xc4>)
 80037ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <prvAddNewTaskToReadyList+0xcc>)
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f7ff fde6 	bl	80033c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037fa:	f001 f833 	bl	8004864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <prvAddNewTaskToReadyList+0xc0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00e      	beq.n	8003824 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <prvAddNewTaskToReadyList+0xbc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d207      	bcs.n	8003824 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <prvAddNewTaskToReadyList+0xd0>)
 8003816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000620 	.word	0x20000620
 8003830:	20000520 	.word	0x20000520
 8003834:	2000062c 	.word	0x2000062c
 8003838:	2000063c 	.word	0x2000063c
 800383c:	20000628 	.word	0x20000628
 8003840:	20000524 	.word	0x20000524
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003850:	f000 ffd8 	bl	8004804 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <vTaskDelete+0x18>
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <vTaskDelete+0xf8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	e000      	b.n	8003862 <vTaskDelete+0x1a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3304      	adds	r3, #4
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fe09 	bl	8003480 <uxListRemove>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d115      	bne.n	80038a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	4932      	ldr	r1, [pc, #200]	; (8003944 <vTaskDelete+0xfc>)
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <vTaskDelete+0x58>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	2201      	movs	r2, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43da      	mvns	r2, r3
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <vTaskDelete+0x100>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4013      	ands	r3, r2
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <vTaskDelete+0x100>)
 800389e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3318      	adds	r3, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fde7 	bl	8003480 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <vTaskDelete+0x104>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	4a24      	ldr	r2, [pc, #144]	; (800394c <vTaskDelete+0x104>)
 80038ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80038bc:	4b20      	ldr	r3, [pc, #128]	; (8003940 <vTaskDelete+0xf8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d10b      	bne.n	80038de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4820      	ldr	r0, [pc, #128]	; (8003950 <vTaskDelete+0x108>)
 80038ce:	f7ff fd7a 	bl	80033c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <vTaskDelete+0x10c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <vTaskDelete+0x10c>)
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e009      	b.n	80038f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <vTaskDelete+0x110>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <vTaskDelete+0x110>)
 80038e6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fcb1 	bl	8004250 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80038ee:	f000 fce3 	bl	80042b8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80038f2:	f000 ffb7 	bl	8004864 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80038f6:	4b19      	ldr	r3, [pc, #100]	; (800395c <vTaskDelete+0x114>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01b      	beq.n	8003936 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <vTaskDelete+0xf8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	429a      	cmp	r2, r3
 8003906:	d116      	bne.n	8003936 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <vTaskDelete+0x118>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <vTaskDelete+0xde>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60bb      	str	r3, [r7, #8]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <vTaskDelete+0x11c>)
 8003928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000520 	.word	0x20000520
 8003944:	20000524 	.word	0x20000524
 8003948:	20000628 	.word	0x20000628
 800394c:	2000063c 	.word	0x2000063c
 8003950:	200005f4 	.word	0x200005f4
 8003954:	20000608 	.word	0x20000608
 8003958:	20000620 	.word	0x20000620
 800395c:	2000062c 	.word	0x2000062c
 8003960:	20000648 	.word	0x20000648
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <vTaskDelayUntil+0x2a>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	617b      	str	r3, [r7, #20]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <vTaskDelayUntil+0x46>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	613b      	str	r3, [r7, #16]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <vTaskDelayUntil+0xf0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <vTaskDelayUntil+0x64>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60fb      	str	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80039cc:	f000 f992 	bl	8003cf4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <vTaskDelayUntil+0xf4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20b      	bcs.n	8003a02 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d211      	bcs.n	8003a18 <vTaskDelayUntil+0xb0>
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d90d      	bls.n	8003a18 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	e00a      	b.n	8003a18 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d303      	bcc.n	8003a14 <vTaskDelayUntil+0xac>
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d901      	bls.n	8003a18 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003a14:	2301      	movs	r3, #1
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d006      	beq.n	8003a32 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fd53 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003a32:	f000 f96d 	bl	8003d10 <xTaskResumeAll>
 8003a36:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <vTaskDelayUntil+0xf8>)
 8003a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a4e:	bf00      	nop
 8003a50:	3728      	adds	r7, #40	; 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000648 	.word	0x20000648
 8003a5c:	20000624 	.word	0x20000624
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d017      	beq.n	8003aa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <vTaskDelay+0x60>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <vTaskDelay+0x30>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	60bb      	str	r3, [r7, #8]
}
 8003a90:	bf00      	nop
 8003a92:	e7fe      	b.n	8003a92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a94:	f000 f92e 	bl	8003cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fd1c 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aa0:	f000 f936 	bl	8003d10 <xTaskResumeAll>
 8003aa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d107      	bne.n	8003abc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <vTaskDelay+0x64>)
 8003aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000648 	.word	0x20000648
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d90a      	bls.n	8003af6 <vTaskPrioritySet+0x2a>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60fb      	str	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d901      	bls.n	8003b00 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003afc:	2306      	movs	r3, #6
 8003afe:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003b00:	f000 fe80 	bl	8004804 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <vTaskPrioritySet+0x44>
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <vTaskPrioritySet+0x144>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e000      	b.n	8003b12 <vTaskPrioritySet+0x46>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d06f      	beq.n	8003c02 <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d90d      	bls.n	8003b46 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003b2a:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <vTaskPrioritySet+0x144>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d00f      	beq.n	8003b54 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <vTaskPrioritySet+0x144>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d309      	bcc.n	8003b54 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e006      	b.n	8003b54 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003b46:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <vTaskPrioritySet+0x144>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d101      	bne.n	8003b54 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d102      	bne.n	8003b6c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db04      	blt.n	8003b84 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1c3 0207 	rsb	r2, r3, #7
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6959      	ldr	r1, [r3, #20]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <vTaskPrioritySet+0x148>)
 8003b94:	4413      	add	r3, r2
 8003b96:	4299      	cmp	r1, r3
 8003b98:	d128      	bne.n	8003bec <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fc6e 	bl	8003480 <uxListRemove>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003baa:	2201      	movs	r2, #1
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <vTaskPrioritySet+0x14c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <vTaskPrioritySet+0x14c>)
 8003bbc:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <vTaskPrioritySet+0x14c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <vTaskPrioritySet+0x14c>)
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <vTaskPrioritySet+0x148>)
 8003bde:	441a      	add	r2, r3
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7ff fbed 	bl	80033c6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <vTaskPrioritySet+0x150>)
 8003bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003c02:	f000 fe2f 	bl	8004864 <vPortExitCritical>
	}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000520 	.word	0x20000520
 8003c14:	20000524 	.word	0x20000524
 8003c18:	20000628 	.word	0x20000628
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c2e:	463a      	mov	r2, r7
 8003c30:	1d39      	adds	r1, r7, #4
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fca4 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	9202      	str	r2, [sp, #8]
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	4921      	ldr	r1, [pc, #132]	; (8003cd4 <vTaskStartScheduler+0xb4>)
 8003c50:	4821      	ldr	r0, [pc, #132]	; (8003cd8 <vTaskStartScheduler+0xb8>)
 8003c52:	f7ff fc3f 	bl	80034d4 <xTaskCreateStatic>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <vTaskStartScheduler+0xbc>)
 8003c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <vTaskStartScheduler+0xbc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e001      	b.n	8003c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d11b      	bne.n	8003cac <vTaskStartScheduler+0x8c>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	613b      	str	r3, [r7, #16]
}
 8003c86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <vTaskStartScheduler+0xc0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3350      	adds	r3, #80	; 0x50
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <vTaskStartScheduler+0xc4>)
 8003c90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <vTaskStartScheduler+0xc8>)
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <vTaskStartScheduler+0xcc>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <vTaskStartScheduler+0xd0>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ca6:	f000 fd0b 	bl	80046c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003caa:	e00e      	b.n	8003cca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb2:	d10a      	bne.n	8003cca <vTaskStartScheduler+0xaa>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	60fb      	str	r3, [r7, #12]
}
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <vTaskStartScheduler+0xa8>
}
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	080060f8 	.word	0x080060f8
 8003cd8:	0800409d 	.word	0x0800409d
 8003cdc:	20000644 	.word	0x20000644
 8003ce0:	20000520 	.word	0x20000520
 8003ce4:	20000010 	.word	0x20000010
 8003ce8:	20000640 	.word	0x20000640
 8003cec:	2000062c 	.word	0x2000062c
 8003cf0:	20000624 	.word	0x20000624

08003cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <vTaskSuspendAll+0x18>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a03      	ldr	r2, [pc, #12]	; (8003d0c <vTaskSuspendAll+0x18>)
 8003d00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	20000648 	.word	0x20000648

08003d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d1e:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	603b      	str	r3, [r7, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d3c:	f000 fd62 	bl	8004804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d40:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d161      	bne.n	8003e16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d52:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <xTaskResumeAll+0x118>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d05d      	beq.n	8003e16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d5a:	e02e      	b.n	8003dba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <xTaskResumeAll+0x11c>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3318      	adds	r3, #24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fb89 	bl	8003480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fb84 	bl	8003480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <xTaskResumeAll+0x120>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <xTaskResumeAll+0x120>)
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <xTaskResumeAll+0x124>)
 8003d98:	441a      	add	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7ff fb10 	bl	80033c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <xTaskResumeAll+0x128>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <xTaskResumeAll+0x12c>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <xTaskResumeAll+0x11c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1cc      	bne.n	8003d5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dc8:	f000 fa76 	bl	80042b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <xTaskResumeAll+0x130>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dd8:	f000 f846 	bl	8003e68 <xTaskIncrementTick>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <xTaskResumeAll+0x12c>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f1      	bne.n	8003dd8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <xTaskResumeAll+0x130>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <xTaskResumeAll+0x12c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e02:	2301      	movs	r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <xTaskResumeAll+0x134>)
 8003e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e16:	f000 fd25 	bl	8004864 <vPortExitCritical>

	return xAlreadyYielded;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000648 	.word	0x20000648
 8003e28:	20000620 	.word	0x20000620
 8003e2c:	200005e0 	.word	0x200005e0
 8003e30:	20000628 	.word	0x20000628
 8003e34:	20000524 	.word	0x20000524
 8003e38:	20000520 	.word	0x20000520
 8003e3c:	20000634 	.word	0x20000634
 8003e40:	20000630 	.word	0x20000630
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <xTaskGetTickCount+0x1c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e54:	687b      	ldr	r3, [r7, #4]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000624 	.word	0x20000624

08003e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e72:	4b4e      	ldr	r3, [pc, #312]	; (8003fac <xTaskIncrementTick+0x144>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 808e 	bne.w	8003f98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <xTaskIncrementTick+0x148>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e84:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <xTaskIncrementTick+0x148>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d120      	bne.n	8003ed2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <xTaskIncrementTick+0x14c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	603b      	str	r3, [r7, #0]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <xTaskIncrementTick+0x46>
 8003eb0:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <xTaskIncrementTick+0x14c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <xTaskIncrementTick+0x150>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a3e      	ldr	r2, [pc, #248]	; (8003fb4 <xTaskIncrementTick+0x14c>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4a3e      	ldr	r2, [pc, #248]	; (8003fb8 <xTaskIncrementTick+0x150>)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <xTaskIncrementTick+0x154>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <xTaskIncrementTick+0x154>)
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	f000 f9f3 	bl	80042b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <xTaskIncrementTick+0x158>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d348      	bcc.n	8003f6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003edc:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <xTaskIncrementTick+0x14c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <xTaskIncrementTick+0x158>)
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eec:	601a      	str	r2, [r3, #0]
					break;
 8003eee:	e03e      	b.n	8003f6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef0:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <xTaskIncrementTick+0x14c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d203      	bcs.n	8003f10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f08:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <xTaskIncrementTick+0x158>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f0e:	e02e      	b.n	8003f6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fab3 	bl	8003480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3318      	adds	r3, #24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff faaa 	bl	8003480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	2201      	movs	r2, #1
 8003f32:	409a      	lsls	r2, r3
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <xTaskIncrementTick+0x15c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <xTaskIncrementTick+0x15c>)
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <xTaskIncrementTick+0x160>)
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7ff fa36 	bl	80033c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <xTaskIncrementTick+0x164>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d3b9      	bcc.n	8003edc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6c:	e7b6      	b.n	8003edc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <xTaskIncrementTick+0x164>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	4914      	ldr	r1, [pc, #80]	; (8003fc8 <xTaskIncrementTick+0x160>)
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d901      	bls.n	8003f8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <xTaskIncrementTick+0x168>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f92:	2301      	movs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e004      	b.n	8003fa2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <xTaskIncrementTick+0x16c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <xTaskIncrementTick+0x16c>)
 8003fa0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fa2:	697b      	ldr	r3, [r7, #20]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000648 	.word	0x20000648
 8003fb0:	20000624 	.word	0x20000624
 8003fb4:	200005d8 	.word	0x200005d8
 8003fb8:	200005dc 	.word	0x200005dc
 8003fbc:	20000638 	.word	0x20000638
 8003fc0:	20000640 	.word	0x20000640
 8003fc4:	20000628 	.word	0x20000628
 8003fc8:	20000524 	.word	0x20000524
 8003fcc:	20000520 	.word	0x20000520
 8003fd0:	20000634 	.word	0x20000634
 8003fd4:	20000630 	.word	0x20000630

08003fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <vTaskSwitchContext+0xac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <vTaskSwitchContext+0xb0>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fec:	e044      	b.n	8004078 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <vTaskSwitchContext+0xb0>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <vTaskSwitchContext+0xb4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	f1c3 031f 	rsb	r3, r3, #31
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	4921      	ldr	r1, [pc, #132]	; (8004090 <vTaskSwitchContext+0xb8>)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <vTaskSwitchContext+0x5c>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	607b      	str	r3, [r7, #4]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <vTaskSwitchContext+0x5a>
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4a14      	ldr	r2, [pc, #80]	; (8004090 <vTaskSwitchContext+0xb8>)
 8004040:	4413      	add	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3308      	adds	r3, #8
 8004056:	429a      	cmp	r2, r3
 8004058:	d104      	bne.n	8004064 <vTaskSwitchContext+0x8c>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <vTaskSwitchContext+0xbc>)
 800406c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <vTaskSwitchContext+0xbc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3350      	adds	r3, #80	; 0x50
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <vTaskSwitchContext+0xc0>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000648 	.word	0x20000648
 8004088:	20000634 	.word	0x20000634
 800408c:	20000628 	.word	0x20000628
 8004090:	20000524 	.word	0x20000524
 8004094:	20000520 	.word	0x20000520
 8004098:	20000010 	.word	0x20000010

0800409c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040a4:	f000 f8a6 	bl	80041f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <prvIdleTask+0x28>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d9f9      	bls.n	80040a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <prvIdleTask+0x2c>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040c0:	e7f0      	b.n	80040a4 <prvIdleTask+0x8>
 80040c2:	bf00      	nop
 80040c4:	20000524 	.word	0x20000524
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	dc1c      	bgt.n	8004118 <vTaskSetThreadLocalStoragePointer+0x4c>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <vTaskSetThreadLocalStoragePointer+0x1e>
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <vTaskSetThreadLocalStoragePointer+0x58>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	e000      	b.n	80040ec <vTaskSetThreadLocalStoragePointer+0x20>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	617b      	str	r3, [r7, #20]
			configASSERT( pxTCB != NULL );
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <vTaskSetThreadLocalStoragePointer+0x3e>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <vTaskSetThreadLocalStoragePointer+0x3c>
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3312      	adds	r3, #18
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
		}
	}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	20000520 	.word	0x20000520

08004128 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	dc0f      	bgt.n	800415c <pvTaskGetThreadLocalStoragePointer+0x34>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <pvTaskGetThreadLocalStoragePointer+0x20>
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <pvTaskGetThreadLocalStoragePointer+0x48>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	e000      	b.n	800414a <pvTaskGetThreadLocalStoragePointer+0x22>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	3312      	adds	r3, #18
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e001      	b.n	8004160 <pvTaskGetThreadLocalStoragePointer+0x38>
		}
		else
		{
			pvReturn = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8004160:	68fb      	ldr	r3, [r7, #12]
	}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000520 	.word	0x20000520

08004174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e00c      	b.n	800419a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <prvInitialiseTaskLists+0x60>)
 800418c:	4413      	add	r3, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f8ec 	bl	800336c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b06      	cmp	r3, #6
 800419e:	d9ef      	bls.n	8004180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041a0:	480d      	ldr	r0, [pc, #52]	; (80041d8 <prvInitialiseTaskLists+0x64>)
 80041a2:	f7ff f8e3 	bl	800336c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041a6:	480d      	ldr	r0, [pc, #52]	; (80041dc <prvInitialiseTaskLists+0x68>)
 80041a8:	f7ff f8e0 	bl	800336c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041ac:	480c      	ldr	r0, [pc, #48]	; (80041e0 <prvInitialiseTaskLists+0x6c>)
 80041ae:	f7ff f8dd 	bl	800336c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041b2:	480c      	ldr	r0, [pc, #48]	; (80041e4 <prvInitialiseTaskLists+0x70>)
 80041b4:	f7ff f8da 	bl	800336c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041b8:	480b      	ldr	r0, [pc, #44]	; (80041e8 <prvInitialiseTaskLists+0x74>)
 80041ba:	f7ff f8d7 	bl	800336c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <prvInitialiseTaskLists+0x78>)
 80041c0:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <prvInitialiseTaskLists+0x64>)
 80041c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <prvInitialiseTaskLists+0x7c>)
 80041c6:	4a05      	ldr	r2, [pc, #20]	; (80041dc <prvInitialiseTaskLists+0x68>)
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000524 	.word	0x20000524
 80041d8:	200005b0 	.word	0x200005b0
 80041dc:	200005c4 	.word	0x200005c4
 80041e0:	200005e0 	.word	0x200005e0
 80041e4:	200005f4 	.word	0x200005f4
 80041e8:	2000060c 	.word	0x2000060c
 80041ec:	200005d8 	.word	0x200005d8
 80041f0:	200005dc 	.word	0x200005dc

080041f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041fa:	e019      	b.n	8004230 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041fc:	f000 fb02 	bl	8004804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <prvCheckTasksWaitingTermination+0x50>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff f937 	bl	8003480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <prvCheckTasksWaitingTermination+0x54>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3b01      	subs	r3, #1
 8004218:	4a0b      	ldr	r2, [pc, #44]	; (8004248 <prvCheckTasksWaitingTermination+0x54>)
 800421a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <prvCheckTasksWaitingTermination+0x58>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3b01      	subs	r3, #1
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <prvCheckTasksWaitingTermination+0x58>)
 8004224:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004226:	f000 fb1d 	bl	8004864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f810 	bl	8004250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <prvCheckTasksWaitingTermination+0x58>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e1      	bne.n	80041fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200005f4 	.word	0x200005f4
 8004248:	20000620 	.word	0x20000620
 800424c:	20000608 	.word	0x20000608

08004250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3350      	adds	r3, #80	; 0x50
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f839 	bl	80052d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004268:	2b00      	cmp	r3, #0
 800426a:	d108      	bne.n	800427e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fcb5 	bl	8004be0 <vPortFree>
				vPortFree( pxTCB );
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fcb2 	bl	8004be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800427c:	e018      	b.n	80042b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004284:	2b01      	cmp	r3, #1
 8004286:	d103      	bne.n	8004290 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fca9 	bl	8004be0 <vPortFree>
	}
 800428e:	e00f      	b.n	80042b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004296:	2b02      	cmp	r3, #2
 8004298:	d00a      	beq.n	80042b0 <prvDeleteTCB+0x60>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60fb      	str	r3, [r7, #12]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <prvDeleteTCB+0x5e>
	}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <prvResetNextTaskUnblockTime+0x38>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <prvResetNextTaskUnblockTime+0x3c>)
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042d0:	e008      	b.n	80042e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <prvResetNextTaskUnblockTime+0x38>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <prvResetNextTaskUnblockTime+0x3c>)
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	200005d8 	.word	0x200005d8
 80042f4:	20000640 	.word	0x20000640

080042f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <xTaskGetCurrentTaskHandle+0x1c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004304:	687b      	ldr	r3, [r7, #4]
	}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000520 	.word	0x20000520

08004318 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004322:	f000 fa6f 	bl	8004804 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <ulTaskNotifyTake+0x90>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004332:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <ulTaskNotifyTake+0x90>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004342:	2101      	movs	r1, #1
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	f000 f8c7 	bl	80044d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800434a:	4b18      	ldr	r3, [pc, #96]	; (80043ac <ulTaskNotifyTake+0x94>)
 800434c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800435a:	f000 fa83 	bl	8004864 <vPortExitCritical>

		taskENTER_CRITICAL();
 800435e:	f000 fa51 	bl	8004804 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <ulTaskNotifyTake+0x90>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800436a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00e      	beq.n	8004390 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <ulTaskNotifyTake+0x90>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004382:	e005      	b.n	8004390 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <ulTaskNotifyTake+0x90>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	3a01      	subs	r2, #1
 800438c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <ulTaskNotifyTake+0x90>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 800439a:	f000 fa63 	bl	8004864 <vPortExitCritical>

		return ulReturn;
 800439e:	68fb      	ldr	r3, [r7, #12]
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000520 	.word	0x20000520
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043d6:	f000 faf7 	bl	80049c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043de:	f3ef 8211 	mrs	r2, BASEPRI
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	617a      	str	r2, [r7, #20]
 80043f4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043f6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043f8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004400:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2202      	movs	r2, #2
 8004406:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004418:	7ffb      	ldrb	r3, [r7, #31]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d145      	bne.n	80044aa <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60fb      	str	r3, [r7, #12]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <vTaskNotifyGiveFromISR+0x110>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11c      	bne.n	800447e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff f819 	bl	8003480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	2201      	movs	r2, #1
 8004454:	409a      	lsls	r2, r3
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <vTaskNotifyGiveFromISR+0x114>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <vTaskNotifyGiveFromISR+0x114>)
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <vTaskNotifyGiveFromISR+0x118>)
 800446e:	441a      	add	r2, r3
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe ffa5 	bl	80033c6 <vListInsertEnd>
 800447c:	e005      	b.n	800448a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	3318      	adds	r3, #24
 8004482:	4619      	mov	r1, r3
 8004484:	4811      	ldr	r0, [pc, #68]	; (80044cc <vTaskNotifyGiveFromISR+0x11c>)
 8004486:	f7fe ff9e 	bl	80033c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <vTaskNotifyGiveFromISR+0x120>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	429a      	cmp	r2, r3
 8004496:	d908      	bls.n	80044aa <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vTaskNotifyGiveFromISR+0x124>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044b4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80044b6:	bf00      	nop
 80044b8:	3728      	adds	r7, #40	; 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000648 	.word	0x20000648
 80044c4:	20000628 	.word	0x20000628
 80044c8:	20000524 	.word	0x20000524
 80044cc:	200005e0 	.word	0x200005e0
 80044d0:	20000520 	.word	0x20000520
 80044d4:	20000634 	.word	0x20000634

080044d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe ffc6 	bl	8003480 <uxListRemove>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2201      	movs	r2, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	4b21      	ldr	r3, [pc, #132]	; (8004590 <prvAddCurrentTaskToDelayedList+0xb8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4013      	ands	r3, r2
 800450e:	4a20      	ldr	r2, [pc, #128]	; (8004590 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004510:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004518:	d10a      	bne.n	8004530 <prvAddCurrentTaskToDelayedList+0x58>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004520:	4b1a      	ldr	r3, [pc, #104]	; (800458c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3304      	adds	r3, #4
 8004526:	4619      	mov	r1, r3
 8004528:	481a      	ldr	r0, [pc, #104]	; (8004594 <prvAddCurrentTaskToDelayedList+0xbc>)
 800452a:	f7fe ff4c 	bl	80033c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800452e:	e026      	b.n	800457e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004538:	4b14      	ldr	r3, [pc, #80]	; (800458c <prvAddCurrentTaskToDelayedList+0xb4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	429a      	cmp	r2, r3
 8004546:	d209      	bcs.n	800455c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004548:	4b13      	ldr	r3, [pc, #76]	; (8004598 <prvAddCurrentTaskToDelayedList+0xc0>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <prvAddCurrentTaskToDelayedList+0xb4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe ff5a 	bl	800340e <vListInsert>
}
 800455a:	e010      	b.n	800457e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <prvAddCurrentTaskToDelayedList+0xc4>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fe ff50 	bl	800340e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800456e:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d202      	bcs.n	800457e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000624 	.word	0x20000624
 800458c:	20000520 	.word	0x20000520
 8004590:	20000628 	.word	0x20000628
 8004594:	2000060c 	.word	0x2000060c
 8004598:	200005dc 	.word	0x200005dc
 800459c:	200005d8 	.word	0x200005d8
 80045a0:	20000640 	.word	0x20000640

080045a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3b04      	subs	r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3b04      	subs	r3, #4
 80045c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045d4:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <pxPortInitialiseStack+0x64>)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b14      	subs	r3, #20
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b04      	subs	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f06f 0202 	mvn.w	r2, #2
 80045f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3b20      	subs	r3, #32
 80045f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045fa:	68fb      	ldr	r3, [r7, #12]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	0800460d 	.word	0x0800460d

0800460c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <prvTaskExitError+0x54>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461e:	d00a      	beq.n	8004636 <prvTaskExitError+0x2a>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <prvTaskExitError+0x28>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60bb      	str	r3, [r7, #8]
}
 8004648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800464a:	bf00      	nop
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0fc      	beq.n	800464c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	2000000c 	.word	0x2000000c
	...

08004670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <pxCurrentTCBConst2>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f380 8809 	msr	PSP, r0
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8811 	msr	BASEPRI, r0
 800468a:	4770      	bx	lr
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst2>:
 8004690:	20000520 	.word	0x20000520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004698:	4808      	ldr	r0, [pc, #32]	; (80046bc <prvPortStartFirstTask+0x24>)
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	f380 8808 	msr	MSP, r0
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8814 	msr	CONTROL, r0
 80046aa:	b662      	cpsie	i
 80046ac:	b661      	cpsie	f
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	df00      	svc	0
 80046b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ba:	bf00      	nop
 80046bc:	e000ed08 	.word	0xe000ed08

080046c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <xPortStartScheduler+0x120>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a46      	ldr	r2, [pc, #280]	; (80047e4 <xPortStartScheduler+0x124>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10a      	bne.n	80046e6 <xPortStartScheduler+0x26>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	613b      	str	r3, [r7, #16]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <xPortStartScheduler+0x120>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a3f      	ldr	r2, [pc, #252]	; (80047e8 <xPortStartScheduler+0x128>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d10a      	bne.n	8004706 <xPortStartScheduler+0x46>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60fb      	str	r3, [r7, #12]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004706:	4b39      	ldr	r3, [pc, #228]	; (80047ec <xPortStartScheduler+0x12c>)
 8004708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <xPortStartScheduler+0x130>)
 800472c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <xPortStartScheduler+0x134>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004734:	e009      	b.n	800474a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <xPortStartScheduler+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <xPortStartScheduler+0x134>)
 800473e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b80      	cmp	r3, #128	; 0x80
 8004754:	d0ef      	beq.n	8004736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <xPortStartScheduler+0x134>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	d00a      	beq.n	8004778 <xPortStartScheduler+0xb8>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	60bb      	str	r3, [r7, #8]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <xPortStartScheduler+0x134>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <xPortStartScheduler+0x134>)
 8004780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <xPortStartScheduler+0x134>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <xPortStartScheduler+0x134>)
 800478c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <xPortStartScheduler+0x138>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <xPortStartScheduler+0x138>)
 800479c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <xPortStartScheduler+0x138>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <xPortStartScheduler+0x138>)
 80047a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047ae:	f000 f8dd 	bl	800496c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <xPortStartScheduler+0x13c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047b8:	f000 f8fc 	bl	80049b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047bc:	4b10      	ldr	r3, [pc, #64]	; (8004800 <xPortStartScheduler+0x140>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0f      	ldr	r2, [pc, #60]	; (8004800 <xPortStartScheduler+0x140>)
 80047c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047c8:	f7ff ff66 	bl	8004698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047cc:	f7ff fc04 	bl	8003fd8 <vTaskSwitchContext>
	prvTaskExitError();
 80047d0:	f7ff ff1c 	bl	800460c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	e000ed00 	.word	0xe000ed00
 80047e4:	410fc271 	.word	0x410fc271
 80047e8:	410fc270 	.word	0x410fc270
 80047ec:	e000e400 	.word	0xe000e400
 80047f0:	2000064c 	.word	0x2000064c
 80047f4:	20000650 	.word	0x20000650
 80047f8:	e000ed20 	.word	0xe000ed20
 80047fc:	2000000c 	.word	0x2000000c
 8004800:	e000ef34 	.word	0xe000ef34

08004804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	607b      	str	r3, [r7, #4]
}
 800481c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800481e:	4b0f      	ldr	r3, [pc, #60]	; (800485c <vPortEnterCritical+0x58>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3301      	adds	r3, #1
 8004824:	4a0d      	ldr	r2, [pc, #52]	; (800485c <vPortEnterCritical+0x58>)
 8004826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <vPortEnterCritical+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10f      	bne.n	8004850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortEnterCritical+0x5c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <vPortEnterCritical+0x4c>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	603b      	str	r3, [r7, #0]
}
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <vPortEnterCritical+0x4a>
	}
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	2000000c 	.word	0x2000000c
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <vPortExitCritical+0x50>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <vPortExitCritical+0x24>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <vPortExitCritical+0x50>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3b01      	subs	r3, #1
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <vPortExitCritical+0x50>)
 8004890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <vPortExitCritical+0x50>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <vPortExitCritical+0x42>
 800489a:	2300      	movs	r3, #0
 800489c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f383 8811 	msr	BASEPRI, r3
}
 80048a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c
	...

080048c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048c0:	f3ef 8009 	mrs	r0, PSP
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <pxCurrentTCBConst>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f01e 0f10 	tst.w	lr, #16
 80048d0:	bf08      	it	eq
 80048d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048e4:	f380 8811 	msr	BASEPRI, r0
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f7ff fb72 	bl	8003fd8 <vTaskSwitchContext>
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f380 8811 	msr	BASEPRI, r0
 80048fc:	bc09      	pop	{r0, r3}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004906:	f01e 0f10 	tst.w	lr, #16
 800490a:	bf08      	it	eq
 800490c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004910:	f380 8809 	msr	PSP, r0
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst>:
 8004920:	20000520 	.word	0x20000520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004942:	f7ff fa91 	bl	8003e68 <xTaskIncrementTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <SysTick_Handler+0x40>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <vPortSetupTimerInterrupt+0x38>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <vPortSetupTimerInterrupt+0x40>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <vPortSetupTimerInterrupt+0x44>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e010 	.word	0xe000e010
 80049a4:	e000e018 	.word	0xe000e018
 80049a8:	20000000 	.word	0x20000000
 80049ac:	10624dd3 	.word	0x10624dd3
 80049b0:	e000e014 	.word	0xe000e014

080049b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049c4 <vPortEnableVFP+0x10>
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049be:	6001      	str	r1, [r0, #0]
 80049c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049c2:	bf00      	nop
 80049c4:	e000ed88 	.word	0xe000ed88

080049c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049ce:	f3ef 8305 	mrs	r3, IPSR
 80049d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	d914      	bls.n	8004a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <vPortValidateInterruptPriority+0x70>)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <vPortValidateInterruptPriority+0x74>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	7afa      	ldrb	r2, [r7, #11]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20a      	bcs.n	8004a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <vPortValidateInterruptPriority+0x78>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <vPortValidateInterruptPriority+0x7c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d90a      	bls.n	8004a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	603b      	str	r3, [r7, #0]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <vPortValidateInterruptPriority+0x60>
	}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e3f0 	.word	0xe000e3f0
 8004a3c:	2000064c 	.word	0x2000064c
 8004a40:	e000ed0c 	.word	0xe000ed0c
 8004a44:	20000650 	.word	0x20000650

08004a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a54:	f7ff f94e 	bl	8003cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a58:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <pvPortMalloc+0x180>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a60:	f000 f920 	bl	8004ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <pvPortMalloc+0x184>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 8093 	bne.w	8004b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01d      	beq.n	8004ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a78:	2208      	movs	r2, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	3308      	adds	r3, #8
 8004a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d06e      	beq.n	8004b98 <pvPortMalloc+0x150>
 8004aba:	4b45      	ldr	r3, [pc, #276]	; (8004bd0 <pvPortMalloc+0x188>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d869      	bhi.n	8004b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <pvPortMalloc+0x18c>)
 8004ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <pvPortMalloc+0x18c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ace:	e004      	b.n	8004ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d903      	bls.n	8004aec <pvPortMalloc+0xa4>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f1      	bne.n	8004ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <pvPortMalloc+0x180>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d050      	beq.n	8004b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2208      	movs	r2, #8
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	2308      	movs	r3, #8
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d91f      	bls.n	8004b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <pvPortMalloc+0xf8>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	613b      	str	r3, [r7, #16]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b52:	69b8      	ldr	r0, [r7, #24]
 8004b54:	f000 f908 	bl	8004d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <pvPortMalloc+0x190>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d203      	bcs.n	8004b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b72:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <pvPortMalloc+0x190>)
 8004b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <pvPortMalloc+0x184>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <pvPortMalloc+0x194>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <pvPortMalloc+0x194>)
 8004b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b98:	f7ff f8ba 	bl	8003d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <pvPortMalloc+0x174>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60fb      	str	r3, [r7, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <pvPortMalloc+0x172>
	return pvReturn;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	2000425c 	.word	0x2000425c
 8004bcc:	20004270 	.word	0x20004270
 8004bd0:	20004260 	.word	0x20004260
 8004bd4:	20004254 	.word	0x20004254
 8004bd8:	20004264 	.word	0x20004264
 8004bdc:	20004268 	.word	0x20004268

08004be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04d      	beq.n	8004c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	425b      	negs	r3, r3
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <vPortFree+0xb8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <vPortFree+0x44>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60fb      	str	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <vPortFree+0x62>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60bb      	str	r3, [r7, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <vPortFree+0xb8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01e      	beq.n	8004c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11a      	bne.n	8004c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <vPortFree+0xb8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c68:	f7ff f844 	bl	8003cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <vPortFree+0xbc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <vPortFree+0xbc>)
 8004c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f000 f874 	bl	8004d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <vPortFree+0xc0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3301      	adds	r3, #1
 8004c86:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <vPortFree+0xc0>)
 8004c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c8a:	f7ff f841 	bl	8003d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20004270 	.word	0x20004270
 8004c9c:	20004260 	.word	0x20004260
 8004ca0:	2000426c 	.word	0x2000426c

08004ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <prvHeapInit+0xac>)
 8004cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <prvHeapInit+0xac>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <prvHeapInit+0xb0>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <prvHeapInit+0xb0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <prvHeapInit+0xb4>)
 8004d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <prvHeapInit+0xb4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvHeapInit+0xb4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvHeapInit+0xb4>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <prvHeapInit+0xb8>)
 8004d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <prvHeapInit+0xbc>)
 8004d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <prvHeapInit+0xc0>)
 8004d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000654 	.word	0x20000654
 8004d54:	20004254 	.word	0x20004254
 8004d58:	2000425c 	.word	0x2000425c
 8004d5c:	20004264 	.word	0x20004264
 8004d60:	20004260 	.word	0x20004260
 8004d64:	20004270 	.word	0x20004270

08004d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <prvInsertBlockIntoFreeList+0xac>)
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <prvInsertBlockIntoFreeList+0x14>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d8f7      	bhi.n	8004d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4413      	add	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d108      	bne.n	8004daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d118      	bne.n	8004df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d00d      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e008      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d002      	beq.n	8004e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20004254 	.word	0x20004254
 8004e18:	2000425c 	.word	0x2000425c

08004e1c <__errno>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <__errno+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000010 	.word	0x20000010

08004e28 <std>:
 8004e28:	2300      	movs	r3, #0
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e36:	6083      	str	r3, [r0, #8]
 8004e38:	8181      	strh	r1, [r0, #12]
 8004e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e3c:	81c2      	strh	r2, [r0, #14]
 8004e3e:	6183      	str	r3, [r0, #24]
 8004e40:	4619      	mov	r1, r3
 8004e42:	2208      	movs	r2, #8
 8004e44:	305c      	adds	r0, #92	; 0x5c
 8004e46:	f000 f90c 	bl	8005062 <memset>
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <std+0x38>)
 8004e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <std+0x3c>)
 8004e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <std+0x40>)
 8004e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <std+0x44>)
 8004e58:	6224      	str	r4, [r4, #32]
 8004e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	bf00      	nop
 8004e60:	080053ad 	.word	0x080053ad
 8004e64:	080053cf 	.word	0x080053cf
 8004e68:	08005407 	.word	0x08005407
 8004e6c:	0800542b 	.word	0x0800542b

08004e70 <_cleanup_r>:
 8004e70:	4901      	ldr	r1, [pc, #4]	; (8004e78 <_cleanup_r+0x8>)
 8004e72:	f000 b8af 	b.w	8004fd4 <_fwalk_reent>
 8004e76:	bf00      	nop
 8004e78:	08005705 	.word	0x08005705

08004e7c <__sfmoreglue>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	2268      	movs	r2, #104	; 0x68
 8004e80:	1e4d      	subs	r5, r1, #1
 8004e82:	4355      	muls	r5, r2
 8004e84:	460e      	mov	r6, r1
 8004e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e8a:	f000 f913 	bl	80050b4 <_malloc_r>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	b140      	cbz	r0, 8004ea4 <__sfmoreglue+0x28>
 8004e92:	2100      	movs	r1, #0
 8004e94:	e9c0 1600 	strd	r1, r6, [r0]
 8004e98:	300c      	adds	r0, #12
 8004e9a:	60a0      	str	r0, [r4, #8]
 8004e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ea0:	f000 f8df 	bl	8005062 <memset>
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}

08004ea8 <__sfp_lock_acquire>:
 8004ea8:	4801      	ldr	r0, [pc, #4]	; (8004eb0 <__sfp_lock_acquire+0x8>)
 8004eaa:	f000 b8d8 	b.w	800505e <__retarget_lock_acquire_recursive>
 8004eae:	bf00      	nop
 8004eb0:	20004275 	.word	0x20004275

08004eb4 <__sfp_lock_release>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	; (8004ebc <__sfp_lock_release+0x8>)
 8004eb6:	f000 b8d3 	b.w	8005060 <__retarget_lock_release_recursive>
 8004eba:	bf00      	nop
 8004ebc:	20004275 	.word	0x20004275

08004ec0 <__sinit_lock_acquire>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__sinit_lock_acquire+0x8>)
 8004ec2:	f000 b8cc 	b.w	800505e <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	20004276 	.word	0x20004276

08004ecc <__sinit_lock_release>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__sinit_lock_release+0x8>)
 8004ece:	f000 b8c7 	b.w	8005060 <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20004276 	.word	0x20004276

08004ed8 <__sinit>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	4604      	mov	r4, r0
 8004edc:	f7ff fff0 	bl	8004ec0 <__sinit_lock_acquire>
 8004ee0:	69a3      	ldr	r3, [r4, #24]
 8004ee2:	b11b      	cbz	r3, 8004eec <__sinit+0x14>
 8004ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee8:	f7ff bff0 	b.w	8004ecc <__sinit_lock_release>
 8004eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <__sinit+0x68>)
 8004ef4:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <__sinit+0x6c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	bf04      	itt	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	61a3      	streq	r3, [r4, #24]
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 f820 	bl	8004f48 <__sfp>
 8004f08:	6060      	str	r0, [r4, #4]
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 f81c 	bl	8004f48 <__sfp>
 8004f10:	60a0      	str	r0, [r4, #8]
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f818 	bl	8004f48 <__sfp>
 8004f18:	2200      	movs	r2, #0
 8004f1a:	60e0      	str	r0, [r4, #12]
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	6860      	ldr	r0, [r4, #4]
 8004f20:	f7ff ff82 	bl	8004e28 <std>
 8004f24:	68a0      	ldr	r0, [r4, #8]
 8004f26:	2201      	movs	r2, #1
 8004f28:	2109      	movs	r1, #9
 8004f2a:	f7ff ff7d 	bl	8004e28 <std>
 8004f2e:	68e0      	ldr	r0, [r4, #12]
 8004f30:	2202      	movs	r2, #2
 8004f32:	2112      	movs	r1, #18
 8004f34:	f7ff ff78 	bl	8004e28 <std>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	61a3      	str	r3, [r4, #24]
 8004f3c:	e7d2      	b.n	8004ee4 <__sinit+0xc>
 8004f3e:	bf00      	nop
 8004f40:	08006178 	.word	0x08006178
 8004f44:	08004e71 	.word	0x08004e71

08004f48 <__sfp>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	4607      	mov	r7, r0
 8004f4c:	f7ff ffac 	bl	8004ea8 <__sfp_lock_acquire>
 8004f50:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <__sfp+0x84>)
 8004f52:	681e      	ldr	r6, [r3, #0]
 8004f54:	69b3      	ldr	r3, [r6, #24]
 8004f56:	b913      	cbnz	r3, 8004f5e <__sfp+0x16>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff ffbd 	bl	8004ed8 <__sinit>
 8004f5e:	3648      	adds	r6, #72	; 0x48
 8004f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	d503      	bpl.n	8004f70 <__sfp+0x28>
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	b30b      	cbz	r3, 8004fb0 <__sfp+0x68>
 8004f6c:	6836      	ldr	r6, [r6, #0]
 8004f6e:	e7f7      	b.n	8004f60 <__sfp+0x18>
 8004f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f74:	b9d5      	cbnz	r5, 8004fac <__sfp+0x64>
 8004f76:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <__sfp+0x88>)
 8004f78:	60e3      	str	r3, [r4, #12]
 8004f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f80:	f000 f86c 	bl	800505c <__retarget_lock_init_recursive>
 8004f84:	f7ff ff96 	bl	8004eb4 <__sfp_lock_release>
 8004f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f90:	6025      	str	r5, [r4, #0]
 8004f92:	61a5      	str	r5, [r4, #24]
 8004f94:	2208      	movs	r2, #8
 8004f96:	4629      	mov	r1, r5
 8004f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f9c:	f000 f861 	bl	8005062 <memset>
 8004fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fa8:	4620      	mov	r0, r4
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fac:	3468      	adds	r4, #104	; 0x68
 8004fae:	e7d9      	b.n	8004f64 <__sfp+0x1c>
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	f7ff ff62 	bl	8004e7c <__sfmoreglue>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	6030      	str	r0, [r6, #0]
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d1d5      	bne.n	8004f6c <__sfp+0x24>
 8004fc0:	f7ff ff78 	bl	8004eb4 <__sfp_lock_release>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	e7ee      	b.n	8004fa8 <__sfp+0x60>
 8004fca:	bf00      	nop
 8004fcc:	08006178 	.word	0x08006178
 8004fd0:	ffff0001 	.word	0xffff0001

08004fd4 <_fwalk_reent>:
 8004fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	4606      	mov	r6, r0
 8004fda:	4688      	mov	r8, r1
 8004fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fe0:	2700      	movs	r7, #0
 8004fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8004fea:	d505      	bpl.n	8004ff8 <_fwalk_reent+0x24>
 8004fec:	6824      	ldr	r4, [r4, #0]
 8004fee:	2c00      	cmp	r4, #0
 8004ff0:	d1f7      	bne.n	8004fe2 <_fwalk_reent+0xe>
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff8:	89ab      	ldrh	r3, [r5, #12]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d907      	bls.n	800500e <_fwalk_reent+0x3a>
 8004ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005002:	3301      	adds	r3, #1
 8005004:	d003      	beq.n	800500e <_fwalk_reent+0x3a>
 8005006:	4629      	mov	r1, r5
 8005008:	4630      	mov	r0, r6
 800500a:	47c0      	blx	r8
 800500c:	4307      	orrs	r7, r0
 800500e:	3568      	adds	r5, #104	; 0x68
 8005010:	e7e9      	b.n	8004fe6 <_fwalk_reent+0x12>
	...

08005014 <__libc_init_array>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	4d0d      	ldr	r5, [pc, #52]	; (800504c <__libc_init_array+0x38>)
 8005018:	4c0d      	ldr	r4, [pc, #52]	; (8005050 <__libc_init_array+0x3c>)
 800501a:	1b64      	subs	r4, r4, r5
 800501c:	10a4      	asrs	r4, r4, #2
 800501e:	2600      	movs	r6, #0
 8005020:	42a6      	cmp	r6, r4
 8005022:	d109      	bne.n	8005038 <__libc_init_array+0x24>
 8005024:	4d0b      	ldr	r5, [pc, #44]	; (8005054 <__libc_init_array+0x40>)
 8005026:	4c0c      	ldr	r4, [pc, #48]	; (8005058 <__libc_init_array+0x44>)
 8005028:	f000 ff9a 	bl	8005f60 <_init>
 800502c:	1b64      	subs	r4, r4, r5
 800502e:	10a4      	asrs	r4, r4, #2
 8005030:	2600      	movs	r6, #0
 8005032:	42a6      	cmp	r6, r4
 8005034:	d105      	bne.n	8005042 <__libc_init_array+0x2e>
 8005036:	bd70      	pop	{r4, r5, r6, pc}
 8005038:	f855 3b04 	ldr.w	r3, [r5], #4
 800503c:	4798      	blx	r3
 800503e:	3601      	adds	r6, #1
 8005040:	e7ee      	b.n	8005020 <__libc_init_array+0xc>
 8005042:	f855 3b04 	ldr.w	r3, [r5], #4
 8005046:	4798      	blx	r3
 8005048:	3601      	adds	r6, #1
 800504a:	e7f2      	b.n	8005032 <__libc_init_array+0x1e>
 800504c:	080061b8 	.word	0x080061b8
 8005050:	080061b8 	.word	0x080061b8
 8005054:	080061b8 	.word	0x080061b8
 8005058:	080061bc 	.word	0x080061bc

0800505c <__retarget_lock_init_recursive>:
 800505c:	4770      	bx	lr

0800505e <__retarget_lock_acquire_recursive>:
 800505e:	4770      	bx	lr

08005060 <__retarget_lock_release_recursive>:
 8005060:	4770      	bx	lr

08005062 <memset>:
 8005062:	4402      	add	r2, r0
 8005064:	4603      	mov	r3, r0
 8005066:	4293      	cmp	r3, r2
 8005068:	d100      	bne.n	800506c <memset+0xa>
 800506a:	4770      	bx	lr
 800506c:	f803 1b01 	strb.w	r1, [r3], #1
 8005070:	e7f9      	b.n	8005066 <memset+0x4>
	...

08005074 <sbrk_aligned>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4e0e      	ldr	r6, [pc, #56]	; (80050b0 <sbrk_aligned+0x3c>)
 8005078:	460c      	mov	r4, r1
 800507a:	6831      	ldr	r1, [r6, #0]
 800507c:	4605      	mov	r5, r0
 800507e:	b911      	cbnz	r1, 8005086 <sbrk_aligned+0x12>
 8005080:	f000 f984 	bl	800538c <_sbrk_r>
 8005084:	6030      	str	r0, [r6, #0]
 8005086:	4621      	mov	r1, r4
 8005088:	4628      	mov	r0, r5
 800508a:	f000 f97f 	bl	800538c <_sbrk_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	d00a      	beq.n	80050a8 <sbrk_aligned+0x34>
 8005092:	1cc4      	adds	r4, r0, #3
 8005094:	f024 0403 	bic.w	r4, r4, #3
 8005098:	42a0      	cmp	r0, r4
 800509a:	d007      	beq.n	80050ac <sbrk_aligned+0x38>
 800509c:	1a21      	subs	r1, r4, r0
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f974 	bl	800538c <_sbrk_r>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d101      	bne.n	80050ac <sbrk_aligned+0x38>
 80050a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050ac:	4620      	mov	r0, r4
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	2000427c 	.word	0x2000427c

080050b4 <_malloc_r>:
 80050b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	1ccd      	adds	r5, r1, #3
 80050ba:	f025 0503 	bic.w	r5, r5, #3
 80050be:	3508      	adds	r5, #8
 80050c0:	2d0c      	cmp	r5, #12
 80050c2:	bf38      	it	cc
 80050c4:	250c      	movcc	r5, #12
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	4607      	mov	r7, r0
 80050ca:	db01      	blt.n	80050d0 <_malloc_r+0x1c>
 80050cc:	42a9      	cmp	r1, r5
 80050ce:	d905      	bls.n	80050dc <_malloc_r+0x28>
 80050d0:	230c      	movs	r3, #12
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	2600      	movs	r6, #0
 80050d6:	4630      	mov	r0, r6
 80050d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050dc:	4e2e      	ldr	r6, [pc, #184]	; (8005198 <_malloc_r+0xe4>)
 80050de:	f000 fbc5 	bl	800586c <__malloc_lock>
 80050e2:	6833      	ldr	r3, [r6, #0]
 80050e4:	461c      	mov	r4, r3
 80050e6:	bb34      	cbnz	r4, 8005136 <_malloc_r+0x82>
 80050e8:	4629      	mov	r1, r5
 80050ea:	4638      	mov	r0, r7
 80050ec:	f7ff ffc2 	bl	8005074 <sbrk_aligned>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	4604      	mov	r4, r0
 80050f4:	d14d      	bne.n	8005192 <_malloc_r+0xde>
 80050f6:	6834      	ldr	r4, [r6, #0]
 80050f8:	4626      	mov	r6, r4
 80050fa:	2e00      	cmp	r6, #0
 80050fc:	d140      	bne.n	8005180 <_malloc_r+0xcc>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	4631      	mov	r1, r6
 8005102:	4638      	mov	r0, r7
 8005104:	eb04 0803 	add.w	r8, r4, r3
 8005108:	f000 f940 	bl	800538c <_sbrk_r>
 800510c:	4580      	cmp	r8, r0
 800510e:	d13a      	bne.n	8005186 <_malloc_r+0xd2>
 8005110:	6821      	ldr	r1, [r4, #0]
 8005112:	3503      	adds	r5, #3
 8005114:	1a6d      	subs	r5, r5, r1
 8005116:	f025 0503 	bic.w	r5, r5, #3
 800511a:	3508      	adds	r5, #8
 800511c:	2d0c      	cmp	r5, #12
 800511e:	bf38      	it	cc
 8005120:	250c      	movcc	r5, #12
 8005122:	4629      	mov	r1, r5
 8005124:	4638      	mov	r0, r7
 8005126:	f7ff ffa5 	bl	8005074 <sbrk_aligned>
 800512a:	3001      	adds	r0, #1
 800512c:	d02b      	beq.n	8005186 <_malloc_r+0xd2>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	442b      	add	r3, r5
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	e00e      	b.n	8005154 <_malloc_r+0xa0>
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	1b52      	subs	r2, r2, r5
 800513a:	d41e      	bmi.n	800517a <_malloc_r+0xc6>
 800513c:	2a0b      	cmp	r2, #11
 800513e:	d916      	bls.n	800516e <_malloc_r+0xba>
 8005140:	1961      	adds	r1, r4, r5
 8005142:	42a3      	cmp	r3, r4
 8005144:	6025      	str	r5, [r4, #0]
 8005146:	bf18      	it	ne
 8005148:	6059      	strne	r1, [r3, #4]
 800514a:	6863      	ldr	r3, [r4, #4]
 800514c:	bf08      	it	eq
 800514e:	6031      	streq	r1, [r6, #0]
 8005150:	5162      	str	r2, [r4, r5]
 8005152:	604b      	str	r3, [r1, #4]
 8005154:	4638      	mov	r0, r7
 8005156:	f104 060b 	add.w	r6, r4, #11
 800515a:	f000 fb8d 	bl	8005878 <__malloc_unlock>
 800515e:	f026 0607 	bic.w	r6, r6, #7
 8005162:	1d23      	adds	r3, r4, #4
 8005164:	1af2      	subs	r2, r6, r3
 8005166:	d0b6      	beq.n	80050d6 <_malloc_r+0x22>
 8005168:	1b9b      	subs	r3, r3, r6
 800516a:	50a3      	str	r3, [r4, r2]
 800516c:	e7b3      	b.n	80050d6 <_malloc_r+0x22>
 800516e:	6862      	ldr	r2, [r4, #4]
 8005170:	42a3      	cmp	r3, r4
 8005172:	bf0c      	ite	eq
 8005174:	6032      	streq	r2, [r6, #0]
 8005176:	605a      	strne	r2, [r3, #4]
 8005178:	e7ec      	b.n	8005154 <_malloc_r+0xa0>
 800517a:	4623      	mov	r3, r4
 800517c:	6864      	ldr	r4, [r4, #4]
 800517e:	e7b2      	b.n	80050e6 <_malloc_r+0x32>
 8005180:	4634      	mov	r4, r6
 8005182:	6876      	ldr	r6, [r6, #4]
 8005184:	e7b9      	b.n	80050fa <_malloc_r+0x46>
 8005186:	230c      	movs	r3, #12
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	4638      	mov	r0, r7
 800518c:	f000 fb74 	bl	8005878 <__malloc_unlock>
 8005190:	e7a1      	b.n	80050d6 <_malloc_r+0x22>
 8005192:	6025      	str	r5, [r4, #0]
 8005194:	e7de      	b.n	8005154 <_malloc_r+0xa0>
 8005196:	bf00      	nop
 8005198:	20004278 	.word	0x20004278

0800519c <iprintf>:
 800519c:	b40f      	push	{r0, r1, r2, r3}
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <iprintf+0x2c>)
 80051a0:	b513      	push	{r0, r1, r4, lr}
 80051a2:	681c      	ldr	r4, [r3, #0]
 80051a4:	b124      	cbz	r4, 80051b0 <iprintf+0x14>
 80051a6:	69a3      	ldr	r3, [r4, #24]
 80051a8:	b913      	cbnz	r3, 80051b0 <iprintf+0x14>
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff fe94 	bl	8004ed8 <__sinit>
 80051b0:	ab05      	add	r3, sp, #20
 80051b2:	9a04      	ldr	r2, [sp, #16]
 80051b4:	68a1      	ldr	r1, [r4, #8]
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 fbd9 	bl	8005970 <_vfiprintf_r>
 80051be:	b002      	add	sp, #8
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c4:	b004      	add	sp, #16
 80051c6:	4770      	bx	lr
 80051c8:	20000010 	.word	0x20000010

080051cc <_puts_r>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	460e      	mov	r6, r1
 80051d0:	4605      	mov	r5, r0
 80051d2:	b118      	cbz	r0, 80051dc <_puts_r+0x10>
 80051d4:	6983      	ldr	r3, [r0, #24]
 80051d6:	b90b      	cbnz	r3, 80051dc <_puts_r+0x10>
 80051d8:	f7ff fe7e 	bl	8004ed8 <__sinit>
 80051dc:	69ab      	ldr	r3, [r5, #24]
 80051de:	68ac      	ldr	r4, [r5, #8]
 80051e0:	b913      	cbnz	r3, 80051e8 <_puts_r+0x1c>
 80051e2:	4628      	mov	r0, r5
 80051e4:	f7ff fe78 	bl	8004ed8 <__sinit>
 80051e8:	4b2c      	ldr	r3, [pc, #176]	; (800529c <_puts_r+0xd0>)
 80051ea:	429c      	cmp	r4, r3
 80051ec:	d120      	bne.n	8005230 <_puts_r+0x64>
 80051ee:	686c      	ldr	r4, [r5, #4]
 80051f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f2:	07db      	lsls	r3, r3, #31
 80051f4:	d405      	bmi.n	8005202 <_puts_r+0x36>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	0598      	lsls	r0, r3, #22
 80051fa:	d402      	bmi.n	8005202 <_puts_r+0x36>
 80051fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051fe:	f7ff ff2e 	bl	800505e <__retarget_lock_acquire_recursive>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	0719      	lsls	r1, r3, #28
 8005206:	d51d      	bpl.n	8005244 <_puts_r+0x78>
 8005208:	6923      	ldr	r3, [r4, #16]
 800520a:	b1db      	cbz	r3, 8005244 <_puts_r+0x78>
 800520c:	3e01      	subs	r6, #1
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005214:	3b01      	subs	r3, #1
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	bb39      	cbnz	r1, 800526a <_puts_r+0x9e>
 800521a:	2b00      	cmp	r3, #0
 800521c:	da38      	bge.n	8005290 <_puts_r+0xc4>
 800521e:	4622      	mov	r2, r4
 8005220:	210a      	movs	r1, #10
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f906 	bl	8005434 <__swbuf_r>
 8005228:	3001      	adds	r0, #1
 800522a:	d011      	beq.n	8005250 <_puts_r+0x84>
 800522c:	250a      	movs	r5, #10
 800522e:	e011      	b.n	8005254 <_puts_r+0x88>
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <_puts_r+0xd4>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d101      	bne.n	800523a <_puts_r+0x6e>
 8005236:	68ac      	ldr	r4, [r5, #8]
 8005238:	e7da      	b.n	80051f0 <_puts_r+0x24>
 800523a:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <_puts_r+0xd8>)
 800523c:	429c      	cmp	r4, r3
 800523e:	bf08      	it	eq
 8005240:	68ec      	ldreq	r4, [r5, #12]
 8005242:	e7d5      	b.n	80051f0 <_puts_r+0x24>
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f958 	bl	80054fc <__swsetup_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d0dd      	beq.n	800520c <_puts_r+0x40>
 8005250:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005256:	07da      	lsls	r2, r3, #31
 8005258:	d405      	bmi.n	8005266 <_puts_r+0x9a>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	059b      	lsls	r3, r3, #22
 800525e:	d402      	bmi.n	8005266 <_puts_r+0x9a>
 8005260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005262:	f7ff fefd 	bl	8005060 <__retarget_lock_release_recursive>
 8005266:	4628      	mov	r0, r5
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	2b00      	cmp	r3, #0
 800526c:	da04      	bge.n	8005278 <_puts_r+0xac>
 800526e:	69a2      	ldr	r2, [r4, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	dc06      	bgt.n	8005282 <_puts_r+0xb6>
 8005274:	290a      	cmp	r1, #10
 8005276:	d004      	beq.n	8005282 <_puts_r+0xb6>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	6022      	str	r2, [r4, #0]
 800527e:	7019      	strb	r1, [r3, #0]
 8005280:	e7c5      	b.n	800520e <_puts_r+0x42>
 8005282:	4622      	mov	r2, r4
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f8d5 	bl	8005434 <__swbuf_r>
 800528a:	3001      	adds	r0, #1
 800528c:	d1bf      	bne.n	800520e <_puts_r+0x42>
 800528e:	e7df      	b.n	8005250 <_puts_r+0x84>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	250a      	movs	r5, #10
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	6022      	str	r2, [r4, #0]
 8005298:	701d      	strb	r5, [r3, #0]
 800529a:	e7db      	b.n	8005254 <_puts_r+0x88>
 800529c:	08006138 	.word	0x08006138
 80052a0:	08006158 	.word	0x08006158
 80052a4:	08006118 	.word	0x08006118

080052a8 <puts>:
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <puts+0xc>)
 80052aa:	4601      	mov	r1, r0
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	f7ff bf8d 	b.w	80051cc <_puts_r>
 80052b2:	bf00      	nop
 80052b4:	20000010 	.word	0x20000010

080052b8 <cleanup_glue>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	6809      	ldr	r1, [r1, #0]
 80052be:	4605      	mov	r5, r0
 80052c0:	b109      	cbz	r1, 80052c6 <cleanup_glue+0xe>
 80052c2:	f7ff fff9 	bl	80052b8 <cleanup_glue>
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ce:	f000 bad9 	b.w	8005884 <_free_r>
	...

080052d4 <_reclaim_reent>:
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <_reclaim_reent+0xb4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4283      	cmp	r3, r0
 80052da:	b570      	push	{r4, r5, r6, lr}
 80052dc:	4604      	mov	r4, r0
 80052de:	d051      	beq.n	8005384 <_reclaim_reent+0xb0>
 80052e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052e2:	b143      	cbz	r3, 80052f6 <_reclaim_reent+0x22>
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d14a      	bne.n	8005380 <_reclaim_reent+0xac>
 80052ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	b111      	cbz	r1, 80052f6 <_reclaim_reent+0x22>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 fac7 	bl	8005884 <_free_r>
 80052f6:	6961      	ldr	r1, [r4, #20]
 80052f8:	b111      	cbz	r1, 8005300 <_reclaim_reent+0x2c>
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 fac2 	bl	8005884 <_free_r>
 8005300:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005302:	b111      	cbz	r1, 800530a <_reclaim_reent+0x36>
 8005304:	4620      	mov	r0, r4
 8005306:	f000 fabd 	bl	8005884 <_free_r>
 800530a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800530c:	b111      	cbz	r1, 8005314 <_reclaim_reent+0x40>
 800530e:	4620      	mov	r0, r4
 8005310:	f000 fab8 	bl	8005884 <_free_r>
 8005314:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005316:	b111      	cbz	r1, 800531e <_reclaim_reent+0x4a>
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fab3 	bl	8005884 <_free_r>
 800531e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005320:	b111      	cbz	r1, 8005328 <_reclaim_reent+0x54>
 8005322:	4620      	mov	r0, r4
 8005324:	f000 faae 	bl	8005884 <_free_r>
 8005328:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800532a:	b111      	cbz	r1, 8005332 <_reclaim_reent+0x5e>
 800532c:	4620      	mov	r0, r4
 800532e:	f000 faa9 	bl	8005884 <_free_r>
 8005332:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005334:	b111      	cbz	r1, 800533c <_reclaim_reent+0x68>
 8005336:	4620      	mov	r0, r4
 8005338:	f000 faa4 	bl	8005884 <_free_r>
 800533c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800533e:	b111      	cbz	r1, 8005346 <_reclaim_reent+0x72>
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fa9f 	bl	8005884 <_free_r>
 8005346:	69a3      	ldr	r3, [r4, #24]
 8005348:	b1e3      	cbz	r3, 8005384 <_reclaim_reent+0xb0>
 800534a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800534c:	4620      	mov	r0, r4
 800534e:	4798      	blx	r3
 8005350:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005352:	b1b9      	cbz	r1, 8005384 <_reclaim_reent+0xb0>
 8005354:	4620      	mov	r0, r4
 8005356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800535a:	f7ff bfad 	b.w	80052b8 <cleanup_glue>
 800535e:	5949      	ldr	r1, [r1, r5]
 8005360:	b941      	cbnz	r1, 8005374 <_reclaim_reent+0xa0>
 8005362:	3504      	adds	r5, #4
 8005364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005366:	2d80      	cmp	r5, #128	; 0x80
 8005368:	68d9      	ldr	r1, [r3, #12]
 800536a:	d1f8      	bne.n	800535e <_reclaim_reent+0x8a>
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fa89 	bl	8005884 <_free_r>
 8005372:	e7ba      	b.n	80052ea <_reclaim_reent+0x16>
 8005374:	680e      	ldr	r6, [r1, #0]
 8005376:	4620      	mov	r0, r4
 8005378:	f000 fa84 	bl	8005884 <_free_r>
 800537c:	4631      	mov	r1, r6
 800537e:	e7ef      	b.n	8005360 <_reclaim_reent+0x8c>
 8005380:	2500      	movs	r5, #0
 8005382:	e7ef      	b.n	8005364 <_reclaim_reent+0x90>
 8005384:	bd70      	pop	{r4, r5, r6, pc}
 8005386:	bf00      	nop
 8005388:	20000010 	.word	0x20000010

0800538c <_sbrk_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d06      	ldr	r5, [pc, #24]	; (80053a8 <_sbrk_r+0x1c>)
 8005390:	2300      	movs	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	f7fc fa94 	bl	80018c4 <_sbrk>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_sbrk_r+0x1a>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_sbrk_r+0x1a>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	20004280 	.word	0x20004280

080053ac <__sread>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	460c      	mov	r4, r1
 80053b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b4:	f000 fda0 	bl	8005ef8 <_read_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	bfab      	itete	ge
 80053bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053be:	89a3      	ldrhlt	r3, [r4, #12]
 80053c0:	181b      	addge	r3, r3, r0
 80053c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053c6:	bfac      	ite	ge
 80053c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80053ca:	81a3      	strhlt	r3, [r4, #12]
 80053cc:	bd10      	pop	{r4, pc}

080053ce <__swrite>:
 80053ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d2:	461f      	mov	r7, r3
 80053d4:	898b      	ldrh	r3, [r1, #12]
 80053d6:	05db      	lsls	r3, r3, #23
 80053d8:	4605      	mov	r5, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	4616      	mov	r6, r2
 80053de:	d505      	bpl.n	80053ec <__swrite+0x1e>
 80053e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e4:	2302      	movs	r3, #2
 80053e6:	2200      	movs	r2, #0
 80053e8:	f000 f9c8 	bl	800577c <_lseek_r>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	4632      	mov	r2, r6
 80053fa:	463b      	mov	r3, r7
 80053fc:	4628      	mov	r0, r5
 80053fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005402:	f000 b869 	b.w	80054d8 <_write_r>

08005406 <__sseek>:
 8005406:	b510      	push	{r4, lr}
 8005408:	460c      	mov	r4, r1
 800540a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540e:	f000 f9b5 	bl	800577c <_lseek_r>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	bf15      	itete	ne
 8005418:	6560      	strne	r0, [r4, #84]	; 0x54
 800541a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800541e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strheq	r3, [r4, #12]
 8005424:	bf18      	it	ne
 8005426:	81a3      	strhne	r3, [r4, #12]
 8005428:	bd10      	pop	{r4, pc}

0800542a <__sclose>:
 800542a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542e:	f000 b8d3 	b.w	80055d8 <_close_r>
	...

08005434 <__swbuf_r>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	460e      	mov	r6, r1
 8005438:	4614      	mov	r4, r2
 800543a:	4605      	mov	r5, r0
 800543c:	b118      	cbz	r0, 8005446 <__swbuf_r+0x12>
 800543e:	6983      	ldr	r3, [r0, #24]
 8005440:	b90b      	cbnz	r3, 8005446 <__swbuf_r+0x12>
 8005442:	f7ff fd49 	bl	8004ed8 <__sinit>
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <__swbuf_r+0x98>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d12b      	bne.n	80054a4 <__swbuf_r+0x70>
 800544c:	686c      	ldr	r4, [r5, #4]
 800544e:	69a3      	ldr	r3, [r4, #24]
 8005450:	60a3      	str	r3, [r4, #8]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	071a      	lsls	r2, r3, #28
 8005456:	d52f      	bpl.n	80054b8 <__swbuf_r+0x84>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	b36b      	cbz	r3, 80054b8 <__swbuf_r+0x84>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	1ac0      	subs	r0, r0, r3
 8005462:	6963      	ldr	r3, [r4, #20]
 8005464:	b2f6      	uxtb	r6, r6
 8005466:	4283      	cmp	r3, r0
 8005468:	4637      	mov	r7, r6
 800546a:	dc04      	bgt.n	8005476 <__swbuf_r+0x42>
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f948 	bl	8005704 <_fflush_r>
 8005474:	bb30      	cbnz	r0, 80054c4 <__swbuf_r+0x90>
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	3b01      	subs	r3, #1
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	6022      	str	r2, [r4, #0]
 8005482:	701e      	strb	r6, [r3, #0]
 8005484:	6963      	ldr	r3, [r4, #20]
 8005486:	3001      	adds	r0, #1
 8005488:	4283      	cmp	r3, r0
 800548a:	d004      	beq.n	8005496 <__swbuf_r+0x62>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	07db      	lsls	r3, r3, #31
 8005490:	d506      	bpl.n	80054a0 <__swbuf_r+0x6c>
 8005492:	2e0a      	cmp	r6, #10
 8005494:	d104      	bne.n	80054a0 <__swbuf_r+0x6c>
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f933 	bl	8005704 <_fflush_r>
 800549e:	b988      	cbnz	r0, 80054c4 <__swbuf_r+0x90>
 80054a0:	4638      	mov	r0, r7
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <__swbuf_r+0x9c>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swbuf_r+0x7a>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7cf      	b.n	800544e <__swbuf_r+0x1a>
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <__swbuf_r+0xa0>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7ca      	b.n	800544e <__swbuf_r+0x1a>
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f81e 	bl	80054fc <__swsetup_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0cb      	beq.n	800545c <__swbuf_r+0x28>
 80054c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80054c8:	e7ea      	b.n	80054a0 <__swbuf_r+0x6c>
 80054ca:	bf00      	nop
 80054cc:	08006138 	.word	0x08006138
 80054d0:	08006158 	.word	0x08006158
 80054d4:	08006118 	.word	0x08006118

080054d8 <_write_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	; (80054f8 <_write_r+0x20>)
 80054dc:	4604      	mov	r4, r0
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fb f88d 	bl	8000606 <_write>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_write_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_write_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	20004280 	.word	0x20004280

080054fc <__swsetup_r>:
 80054fc:	4b32      	ldr	r3, [pc, #200]	; (80055c8 <__swsetup_r+0xcc>)
 80054fe:	b570      	push	{r4, r5, r6, lr}
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	4606      	mov	r6, r0
 8005504:	460c      	mov	r4, r1
 8005506:	b125      	cbz	r5, 8005512 <__swsetup_r+0x16>
 8005508:	69ab      	ldr	r3, [r5, #24]
 800550a:	b913      	cbnz	r3, 8005512 <__swsetup_r+0x16>
 800550c:	4628      	mov	r0, r5
 800550e:	f7ff fce3 	bl	8004ed8 <__sinit>
 8005512:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <__swsetup_r+0xd0>)
 8005514:	429c      	cmp	r4, r3
 8005516:	d10f      	bne.n	8005538 <__swsetup_r+0x3c>
 8005518:	686c      	ldr	r4, [r5, #4]
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005520:	0719      	lsls	r1, r3, #28
 8005522:	d42c      	bmi.n	800557e <__swsetup_r+0x82>
 8005524:	06dd      	lsls	r5, r3, #27
 8005526:	d411      	bmi.n	800554c <__swsetup_r+0x50>
 8005528:	2309      	movs	r3, #9
 800552a:	6033      	str	r3, [r6, #0]
 800552c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005536:	e03e      	b.n	80055b6 <__swsetup_r+0xba>
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <__swsetup_r+0xd4>)
 800553a:	429c      	cmp	r4, r3
 800553c:	d101      	bne.n	8005542 <__swsetup_r+0x46>
 800553e:	68ac      	ldr	r4, [r5, #8]
 8005540:	e7eb      	b.n	800551a <__swsetup_r+0x1e>
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <__swsetup_r+0xd8>)
 8005544:	429c      	cmp	r4, r3
 8005546:	bf08      	it	eq
 8005548:	68ec      	ldreq	r4, [r5, #12]
 800554a:	e7e6      	b.n	800551a <__swsetup_r+0x1e>
 800554c:	0758      	lsls	r0, r3, #29
 800554e:	d512      	bpl.n	8005576 <__swsetup_r+0x7a>
 8005550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005552:	b141      	cbz	r1, 8005566 <__swsetup_r+0x6a>
 8005554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <__swsetup_r+0x66>
 800555c:	4630      	mov	r0, r6
 800555e:	f000 f991 	bl	8005884 <_free_r>
 8005562:	2300      	movs	r3, #0
 8005564:	6363      	str	r3, [r4, #52]	; 0x34
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	2300      	movs	r3, #0
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f043 0308 	orr.w	r3, r3, #8
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	b94b      	cbnz	r3, 8005596 <__swsetup_r+0x9a>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558c:	d003      	beq.n	8005596 <__swsetup_r+0x9a>
 800558e:	4621      	mov	r1, r4
 8005590:	4630      	mov	r0, r6
 8005592:	f000 f92b 	bl	80057ec <__smakebuf_r>
 8005596:	89a0      	ldrh	r0, [r4, #12]
 8005598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800559c:	f010 0301 	ands.w	r3, r0, #1
 80055a0:	d00a      	beq.n	80055b8 <__swsetup_r+0xbc>
 80055a2:	2300      	movs	r3, #0
 80055a4:	60a3      	str	r3, [r4, #8]
 80055a6:	6963      	ldr	r3, [r4, #20]
 80055a8:	425b      	negs	r3, r3
 80055aa:	61a3      	str	r3, [r4, #24]
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	b943      	cbnz	r3, 80055c2 <__swsetup_r+0xc6>
 80055b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055b4:	d1ba      	bne.n	800552c <__swsetup_r+0x30>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	0781      	lsls	r1, r0, #30
 80055ba:	bf58      	it	pl
 80055bc:	6963      	ldrpl	r3, [r4, #20]
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	e7f4      	b.n	80055ac <__swsetup_r+0xb0>
 80055c2:	2000      	movs	r0, #0
 80055c4:	e7f7      	b.n	80055b6 <__swsetup_r+0xba>
 80055c6:	bf00      	nop
 80055c8:	20000010 	.word	0x20000010
 80055cc:	08006138 	.word	0x08006138
 80055d0:	08006158 	.word	0x08006158
 80055d4:	08006118 	.word	0x08006118

080055d8 <_close_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d06      	ldr	r5, [pc, #24]	; (80055f4 <_close_r+0x1c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fc f939 	bl	800185a <_close>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_close_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_close_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20004280 	.word	0x20004280

080055f8 <__sflush_r>:
 80055f8:	898a      	ldrh	r2, [r1, #12]
 80055fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	4605      	mov	r5, r0
 8005600:	0710      	lsls	r0, r2, #28
 8005602:	460c      	mov	r4, r1
 8005604:	d458      	bmi.n	80056b8 <__sflush_r+0xc0>
 8005606:	684b      	ldr	r3, [r1, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	dc05      	bgt.n	8005618 <__sflush_r+0x20>
 800560c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	dc02      	bgt.n	8005618 <__sflush_r+0x20>
 8005612:	2000      	movs	r0, #0
 8005614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800561a:	2e00      	cmp	r6, #0
 800561c:	d0f9      	beq.n	8005612 <__sflush_r+0x1a>
 800561e:	2300      	movs	r3, #0
 8005620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005624:	682f      	ldr	r7, [r5, #0]
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	d032      	beq.n	8005690 <__sflush_r+0x98>
 800562a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	075a      	lsls	r2, r3, #29
 8005630:	d505      	bpl.n	800563e <__sflush_r+0x46>
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	1ac0      	subs	r0, r0, r3
 8005636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005638:	b10b      	cbz	r3, 800563e <__sflush_r+0x46>
 800563a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800563c:	1ac0      	subs	r0, r0, r3
 800563e:	2300      	movs	r3, #0
 8005640:	4602      	mov	r2, r0
 8005642:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005644:	6a21      	ldr	r1, [r4, #32]
 8005646:	4628      	mov	r0, r5
 8005648:	47b0      	blx	r6
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	d106      	bne.n	800565e <__sflush_r+0x66>
 8005650:	6829      	ldr	r1, [r5, #0]
 8005652:	291d      	cmp	r1, #29
 8005654:	d82c      	bhi.n	80056b0 <__sflush_r+0xb8>
 8005656:	4a2a      	ldr	r2, [pc, #168]	; (8005700 <__sflush_r+0x108>)
 8005658:	40ca      	lsrs	r2, r1
 800565a:	07d6      	lsls	r6, r2, #31
 800565c:	d528      	bpl.n	80056b0 <__sflush_r+0xb8>
 800565e:	2200      	movs	r2, #0
 8005660:	6062      	str	r2, [r4, #4]
 8005662:	04d9      	lsls	r1, r3, #19
 8005664:	6922      	ldr	r2, [r4, #16]
 8005666:	6022      	str	r2, [r4, #0]
 8005668:	d504      	bpl.n	8005674 <__sflush_r+0x7c>
 800566a:	1c42      	adds	r2, r0, #1
 800566c:	d101      	bne.n	8005672 <__sflush_r+0x7a>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	b903      	cbnz	r3, 8005674 <__sflush_r+0x7c>
 8005672:	6560      	str	r0, [r4, #84]	; 0x54
 8005674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005676:	602f      	str	r7, [r5, #0]
 8005678:	2900      	cmp	r1, #0
 800567a:	d0ca      	beq.n	8005612 <__sflush_r+0x1a>
 800567c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005680:	4299      	cmp	r1, r3
 8005682:	d002      	beq.n	800568a <__sflush_r+0x92>
 8005684:	4628      	mov	r0, r5
 8005686:	f000 f8fd 	bl	8005884 <_free_r>
 800568a:	2000      	movs	r0, #0
 800568c:	6360      	str	r0, [r4, #52]	; 0x34
 800568e:	e7c1      	b.n	8005614 <__sflush_r+0x1c>
 8005690:	6a21      	ldr	r1, [r4, #32]
 8005692:	2301      	movs	r3, #1
 8005694:	4628      	mov	r0, r5
 8005696:	47b0      	blx	r6
 8005698:	1c41      	adds	r1, r0, #1
 800569a:	d1c7      	bne.n	800562c <__sflush_r+0x34>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0c4      	beq.n	800562c <__sflush_r+0x34>
 80056a2:	2b1d      	cmp	r3, #29
 80056a4:	d001      	beq.n	80056aa <__sflush_r+0xb2>
 80056a6:	2b16      	cmp	r3, #22
 80056a8:	d101      	bne.n	80056ae <__sflush_r+0xb6>
 80056aa:	602f      	str	r7, [r5, #0]
 80056ac:	e7b1      	b.n	8005612 <__sflush_r+0x1a>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	e7ad      	b.n	8005614 <__sflush_r+0x1c>
 80056b8:	690f      	ldr	r7, [r1, #16]
 80056ba:	2f00      	cmp	r7, #0
 80056bc:	d0a9      	beq.n	8005612 <__sflush_r+0x1a>
 80056be:	0793      	lsls	r3, r2, #30
 80056c0:	680e      	ldr	r6, [r1, #0]
 80056c2:	bf08      	it	eq
 80056c4:	694b      	ldreq	r3, [r1, #20]
 80056c6:	600f      	str	r7, [r1, #0]
 80056c8:	bf18      	it	ne
 80056ca:	2300      	movne	r3, #0
 80056cc:	eba6 0807 	sub.w	r8, r6, r7
 80056d0:	608b      	str	r3, [r1, #8]
 80056d2:	f1b8 0f00 	cmp.w	r8, #0
 80056d6:	dd9c      	ble.n	8005612 <__sflush_r+0x1a>
 80056d8:	6a21      	ldr	r1, [r4, #32]
 80056da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056dc:	4643      	mov	r3, r8
 80056de:	463a      	mov	r2, r7
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b0      	blx	r6
 80056e4:	2800      	cmp	r0, #0
 80056e6:	dc06      	bgt.n	80056f6 <__sflush_r+0xfe>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f4:	e78e      	b.n	8005614 <__sflush_r+0x1c>
 80056f6:	4407      	add	r7, r0
 80056f8:	eba8 0800 	sub.w	r8, r8, r0
 80056fc:	e7e9      	b.n	80056d2 <__sflush_r+0xda>
 80056fe:	bf00      	nop
 8005700:	20400001 	.word	0x20400001

08005704 <_fflush_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	690b      	ldr	r3, [r1, #16]
 8005708:	4605      	mov	r5, r0
 800570a:	460c      	mov	r4, r1
 800570c:	b913      	cbnz	r3, 8005714 <_fflush_r+0x10>
 800570e:	2500      	movs	r5, #0
 8005710:	4628      	mov	r0, r5
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	b118      	cbz	r0, 800571e <_fflush_r+0x1a>
 8005716:	6983      	ldr	r3, [r0, #24]
 8005718:	b90b      	cbnz	r3, 800571e <_fflush_r+0x1a>
 800571a:	f7ff fbdd 	bl	8004ed8 <__sinit>
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <_fflush_r+0x6c>)
 8005720:	429c      	cmp	r4, r3
 8005722:	d11b      	bne.n	800575c <_fflush_r+0x58>
 8005724:	686c      	ldr	r4, [r5, #4]
 8005726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ef      	beq.n	800570e <_fflush_r+0xa>
 800572e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005730:	07d0      	lsls	r0, r2, #31
 8005732:	d404      	bmi.n	800573e <_fflush_r+0x3a>
 8005734:	0599      	lsls	r1, r3, #22
 8005736:	d402      	bmi.n	800573e <_fflush_r+0x3a>
 8005738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800573a:	f7ff fc90 	bl	800505e <__retarget_lock_acquire_recursive>
 800573e:	4628      	mov	r0, r5
 8005740:	4621      	mov	r1, r4
 8005742:	f7ff ff59 	bl	80055f8 <__sflush_r>
 8005746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005748:	07da      	lsls	r2, r3, #31
 800574a:	4605      	mov	r5, r0
 800574c:	d4e0      	bmi.n	8005710 <_fflush_r+0xc>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	059b      	lsls	r3, r3, #22
 8005752:	d4dd      	bmi.n	8005710 <_fflush_r+0xc>
 8005754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005756:	f7ff fc83 	bl	8005060 <__retarget_lock_release_recursive>
 800575a:	e7d9      	b.n	8005710 <_fflush_r+0xc>
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <_fflush_r+0x70>)
 800575e:	429c      	cmp	r4, r3
 8005760:	d101      	bne.n	8005766 <_fflush_r+0x62>
 8005762:	68ac      	ldr	r4, [r5, #8]
 8005764:	e7df      	b.n	8005726 <_fflush_r+0x22>
 8005766:	4b04      	ldr	r3, [pc, #16]	; (8005778 <_fflush_r+0x74>)
 8005768:	429c      	cmp	r4, r3
 800576a:	bf08      	it	eq
 800576c:	68ec      	ldreq	r4, [r5, #12]
 800576e:	e7da      	b.n	8005726 <_fflush_r+0x22>
 8005770:	08006138 	.word	0x08006138
 8005774:	08006158 	.word	0x08006158
 8005778:	08006118 	.word	0x08006118

0800577c <_lseek_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d07      	ldr	r5, [pc, #28]	; (800579c <_lseek_r+0x20>)
 8005780:	4604      	mov	r4, r0
 8005782:	4608      	mov	r0, r1
 8005784:	4611      	mov	r1, r2
 8005786:	2200      	movs	r2, #0
 8005788:	602a      	str	r2, [r5, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	f7fc f88c 	bl	80018a8 <_lseek>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_lseek_r+0x1e>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_lseek_r+0x1e>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20004280 	.word	0x20004280

080057a0 <__swhatbuf_r>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	460e      	mov	r6, r1
 80057a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a8:	2900      	cmp	r1, #0
 80057aa:	b096      	sub	sp, #88	; 0x58
 80057ac:	4614      	mov	r4, r2
 80057ae:	461d      	mov	r5, r3
 80057b0:	da08      	bge.n	80057c4 <__swhatbuf_r+0x24>
 80057b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	061a      	lsls	r2, r3, #24
 80057bc:	d410      	bmi.n	80057e0 <__swhatbuf_r+0x40>
 80057be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c2:	e00e      	b.n	80057e2 <__swhatbuf_r+0x42>
 80057c4:	466a      	mov	r2, sp
 80057c6:	f000 fba9 	bl	8005f1c <_fstat_r>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	dbf1      	blt.n	80057b2 <__swhatbuf_r+0x12>
 80057ce:	9a01      	ldr	r2, [sp, #4]
 80057d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057d8:	425a      	negs	r2, r3
 80057da:	415a      	adcs	r2, r3
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	e7ee      	b.n	80057be <__swhatbuf_r+0x1e>
 80057e0:	2340      	movs	r3, #64	; 0x40
 80057e2:	2000      	movs	r0, #0
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	b016      	add	sp, #88	; 0x58
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080057ec <__smakebuf_r>:
 80057ec:	898b      	ldrh	r3, [r1, #12]
 80057ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057f0:	079d      	lsls	r5, r3, #30
 80057f2:	4606      	mov	r6, r0
 80057f4:	460c      	mov	r4, r1
 80057f6:	d507      	bpl.n	8005808 <__smakebuf_r+0x1c>
 80057f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2301      	movs	r3, #1
 8005802:	6163      	str	r3, [r4, #20]
 8005804:	b002      	add	sp, #8
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	ab01      	add	r3, sp, #4
 800580a:	466a      	mov	r2, sp
 800580c:	f7ff ffc8 	bl	80057a0 <__swhatbuf_r>
 8005810:	9900      	ldr	r1, [sp, #0]
 8005812:	4605      	mov	r5, r0
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff fc4d 	bl	80050b4 <_malloc_r>
 800581a:	b948      	cbnz	r0, 8005830 <__smakebuf_r+0x44>
 800581c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005820:	059a      	lsls	r2, r3, #22
 8005822:	d4ef      	bmi.n	8005804 <__smakebuf_r+0x18>
 8005824:	f023 0303 	bic.w	r3, r3, #3
 8005828:	f043 0302 	orr.w	r3, r3, #2
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	e7e3      	b.n	80057f8 <__smakebuf_r+0xc>
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <__smakebuf_r+0x7c>)
 8005832:	62b3      	str	r3, [r6, #40]	; 0x28
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	6020      	str	r0, [r4, #0]
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	9b00      	ldr	r3, [sp, #0]
 8005840:	6163      	str	r3, [r4, #20]
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	6120      	str	r0, [r4, #16]
 8005846:	b15b      	cbz	r3, 8005860 <__smakebuf_r+0x74>
 8005848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800584c:	4630      	mov	r0, r6
 800584e:	f000 fb77 	bl	8005f40 <_isatty_r>
 8005852:	b128      	cbz	r0, 8005860 <__smakebuf_r+0x74>
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	89a0      	ldrh	r0, [r4, #12]
 8005862:	4305      	orrs	r5, r0
 8005864:	81a5      	strh	r5, [r4, #12]
 8005866:	e7cd      	b.n	8005804 <__smakebuf_r+0x18>
 8005868:	08004e71 	.word	0x08004e71

0800586c <__malloc_lock>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__malloc_lock+0x8>)
 800586e:	f7ff bbf6 	b.w	800505e <__retarget_lock_acquire_recursive>
 8005872:	bf00      	nop
 8005874:	20004274 	.word	0x20004274

08005878 <__malloc_unlock>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__malloc_unlock+0x8>)
 800587a:	f7ff bbf1 	b.w	8005060 <__retarget_lock_release_recursive>
 800587e:	bf00      	nop
 8005880:	20004274 	.word	0x20004274

08005884 <_free_r>:
 8005884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005886:	2900      	cmp	r1, #0
 8005888:	d044      	beq.n	8005914 <_free_r+0x90>
 800588a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588e:	9001      	str	r0, [sp, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f1a1 0404 	sub.w	r4, r1, #4
 8005896:	bfb8      	it	lt
 8005898:	18e4      	addlt	r4, r4, r3
 800589a:	f7ff ffe7 	bl	800586c <__malloc_lock>
 800589e:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <_free_r+0x94>)
 80058a0:	9801      	ldr	r0, [sp, #4]
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	b933      	cbnz	r3, 80058b4 <_free_r+0x30>
 80058a6:	6063      	str	r3, [r4, #4]
 80058a8:	6014      	str	r4, [r2, #0]
 80058aa:	b003      	add	sp, #12
 80058ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b0:	f7ff bfe2 	b.w	8005878 <__malloc_unlock>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d908      	bls.n	80058ca <_free_r+0x46>
 80058b8:	6825      	ldr	r5, [r4, #0]
 80058ba:	1961      	adds	r1, r4, r5
 80058bc:	428b      	cmp	r3, r1
 80058be:	bf01      	itttt	eq
 80058c0:	6819      	ldreq	r1, [r3, #0]
 80058c2:	685b      	ldreq	r3, [r3, #4]
 80058c4:	1949      	addeq	r1, r1, r5
 80058c6:	6021      	streq	r1, [r4, #0]
 80058c8:	e7ed      	b.n	80058a6 <_free_r+0x22>
 80058ca:	461a      	mov	r2, r3
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	b10b      	cbz	r3, 80058d4 <_free_r+0x50>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d9fa      	bls.n	80058ca <_free_r+0x46>
 80058d4:	6811      	ldr	r1, [r2, #0]
 80058d6:	1855      	adds	r5, r2, r1
 80058d8:	42a5      	cmp	r5, r4
 80058da:	d10b      	bne.n	80058f4 <_free_r+0x70>
 80058dc:	6824      	ldr	r4, [r4, #0]
 80058de:	4421      	add	r1, r4
 80058e0:	1854      	adds	r4, r2, r1
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	d1e0      	bne.n	80058aa <_free_r+0x26>
 80058e8:	681c      	ldr	r4, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	6053      	str	r3, [r2, #4]
 80058ee:	4421      	add	r1, r4
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	e7da      	b.n	80058aa <_free_r+0x26>
 80058f4:	d902      	bls.n	80058fc <_free_r+0x78>
 80058f6:	230c      	movs	r3, #12
 80058f8:	6003      	str	r3, [r0, #0]
 80058fa:	e7d6      	b.n	80058aa <_free_r+0x26>
 80058fc:	6825      	ldr	r5, [r4, #0]
 80058fe:	1961      	adds	r1, r4, r5
 8005900:	428b      	cmp	r3, r1
 8005902:	bf04      	itt	eq
 8005904:	6819      	ldreq	r1, [r3, #0]
 8005906:	685b      	ldreq	r3, [r3, #4]
 8005908:	6063      	str	r3, [r4, #4]
 800590a:	bf04      	itt	eq
 800590c:	1949      	addeq	r1, r1, r5
 800590e:	6021      	streq	r1, [r4, #0]
 8005910:	6054      	str	r4, [r2, #4]
 8005912:	e7ca      	b.n	80058aa <_free_r+0x26>
 8005914:	b003      	add	sp, #12
 8005916:	bd30      	pop	{r4, r5, pc}
 8005918:	20004278 	.word	0x20004278

0800591c <__sfputc_r>:
 800591c:	6893      	ldr	r3, [r2, #8]
 800591e:	3b01      	subs	r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	b410      	push	{r4}
 8005924:	6093      	str	r3, [r2, #8]
 8005926:	da08      	bge.n	800593a <__sfputc_r+0x1e>
 8005928:	6994      	ldr	r4, [r2, #24]
 800592a:	42a3      	cmp	r3, r4
 800592c:	db01      	blt.n	8005932 <__sfputc_r+0x16>
 800592e:	290a      	cmp	r1, #10
 8005930:	d103      	bne.n	800593a <__sfputc_r+0x1e>
 8005932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005936:	f7ff bd7d 	b.w	8005434 <__swbuf_r>
 800593a:	6813      	ldr	r3, [r2, #0]
 800593c:	1c58      	adds	r0, r3, #1
 800593e:	6010      	str	r0, [r2, #0]
 8005940:	7019      	strb	r1, [r3, #0]
 8005942:	4608      	mov	r0, r1
 8005944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005948:	4770      	bx	lr

0800594a <__sfputs_r>:
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	4606      	mov	r6, r0
 800594e:	460f      	mov	r7, r1
 8005950:	4614      	mov	r4, r2
 8005952:	18d5      	adds	r5, r2, r3
 8005954:	42ac      	cmp	r4, r5
 8005956:	d101      	bne.n	800595c <__sfputs_r+0x12>
 8005958:	2000      	movs	r0, #0
 800595a:	e007      	b.n	800596c <__sfputs_r+0x22>
 800595c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005960:	463a      	mov	r2, r7
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ffda 	bl	800591c <__sfputc_r>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d1f3      	bne.n	8005954 <__sfputs_r+0xa>
 800596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005970 <_vfiprintf_r>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	460d      	mov	r5, r1
 8005976:	b09d      	sub	sp, #116	; 0x74
 8005978:	4614      	mov	r4, r2
 800597a:	4698      	mov	r8, r3
 800597c:	4606      	mov	r6, r0
 800597e:	b118      	cbz	r0, 8005988 <_vfiprintf_r+0x18>
 8005980:	6983      	ldr	r3, [r0, #24]
 8005982:	b90b      	cbnz	r3, 8005988 <_vfiprintf_r+0x18>
 8005984:	f7ff faa8 	bl	8004ed8 <__sinit>
 8005988:	4b89      	ldr	r3, [pc, #548]	; (8005bb0 <_vfiprintf_r+0x240>)
 800598a:	429d      	cmp	r5, r3
 800598c:	d11b      	bne.n	80059c6 <_vfiprintf_r+0x56>
 800598e:	6875      	ldr	r5, [r6, #4]
 8005990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005992:	07d9      	lsls	r1, r3, #31
 8005994:	d405      	bmi.n	80059a2 <_vfiprintf_r+0x32>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	059a      	lsls	r2, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_vfiprintf_r+0x32>
 800599c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599e:	f7ff fb5e 	bl	800505e <__retarget_lock_acquire_recursive>
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	071b      	lsls	r3, r3, #28
 80059a6:	d501      	bpl.n	80059ac <_vfiprintf_r+0x3c>
 80059a8:	692b      	ldr	r3, [r5, #16]
 80059aa:	b9eb      	cbnz	r3, 80059e8 <_vfiprintf_r+0x78>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff fda4 	bl	80054fc <__swsetup_r>
 80059b4:	b1c0      	cbz	r0, 80059e8 <_vfiprintf_r+0x78>
 80059b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b8:	07dc      	lsls	r4, r3, #31
 80059ba:	d50e      	bpl.n	80059da <_vfiprintf_r+0x6a>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c0:	b01d      	add	sp, #116	; 0x74
 80059c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c6:	4b7b      	ldr	r3, [pc, #492]	; (8005bb4 <_vfiprintf_r+0x244>)
 80059c8:	429d      	cmp	r5, r3
 80059ca:	d101      	bne.n	80059d0 <_vfiprintf_r+0x60>
 80059cc:	68b5      	ldr	r5, [r6, #8]
 80059ce:	e7df      	b.n	8005990 <_vfiprintf_r+0x20>
 80059d0:	4b79      	ldr	r3, [pc, #484]	; (8005bb8 <_vfiprintf_r+0x248>)
 80059d2:	429d      	cmp	r5, r3
 80059d4:	bf08      	it	eq
 80059d6:	68f5      	ldreq	r5, [r6, #12]
 80059d8:	e7da      	b.n	8005990 <_vfiprintf_r+0x20>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	0598      	lsls	r0, r3, #22
 80059de:	d4ed      	bmi.n	80059bc <_vfiprintf_r+0x4c>
 80059e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e2:	f7ff fb3d 	bl	8005060 <__retarget_lock_release_recursive>
 80059e6:	e7e9      	b.n	80059bc <_vfiprintf_r+0x4c>
 80059e8:	2300      	movs	r3, #0
 80059ea:	9309      	str	r3, [sp, #36]	; 0x24
 80059ec:	2320      	movs	r3, #32
 80059ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f6:	2330      	movs	r3, #48	; 0x30
 80059f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005bbc <_vfiprintf_r+0x24c>
 80059fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a00:	f04f 0901 	mov.w	r9, #1
 8005a04:	4623      	mov	r3, r4
 8005a06:	469a      	mov	sl, r3
 8005a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a0c:	b10a      	cbz	r2, 8005a12 <_vfiprintf_r+0xa2>
 8005a0e:	2a25      	cmp	r2, #37	; 0x25
 8005a10:	d1f9      	bne.n	8005a06 <_vfiprintf_r+0x96>
 8005a12:	ebba 0b04 	subs.w	fp, sl, r4
 8005a16:	d00b      	beq.n	8005a30 <_vfiprintf_r+0xc0>
 8005a18:	465b      	mov	r3, fp
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff ff93 	bl	800594a <__sfputs_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	f000 80aa 	beq.w	8005b7e <_vfiprintf_r+0x20e>
 8005a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a2c:	445a      	add	r2, fp
 8005a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a30:	f89a 3000 	ldrb.w	r3, [sl]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a2 	beq.w	8005b7e <_vfiprintf_r+0x20e>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a44:	f10a 0a01 	add.w	sl, sl, #1
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	9307      	str	r3, [sp, #28]
 8005a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a50:	931a      	str	r3, [sp, #104]	; 0x68
 8005a52:	4654      	mov	r4, sl
 8005a54:	2205      	movs	r2, #5
 8005a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5a:	4858      	ldr	r0, [pc, #352]	; (8005bbc <_vfiprintf_r+0x24c>)
 8005a5c:	f7fa fbc0 	bl	80001e0 <memchr>
 8005a60:	9a04      	ldr	r2, [sp, #16]
 8005a62:	b9d8      	cbnz	r0, 8005a9c <_vfiprintf_r+0x12c>
 8005a64:	06d1      	lsls	r1, r2, #27
 8005a66:	bf44      	itt	mi
 8005a68:	2320      	movmi	r3, #32
 8005a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6e:	0713      	lsls	r3, r2, #28
 8005a70:	bf44      	itt	mi
 8005a72:	232b      	movmi	r3, #43	; 0x2b
 8005a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a78:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7e:	d015      	beq.n	8005aac <_vfiprintf_r+0x13c>
 8005a80:	9a07      	ldr	r2, [sp, #28]
 8005a82:	4654      	mov	r4, sl
 8005a84:	2000      	movs	r0, #0
 8005a86:	f04f 0c0a 	mov.w	ip, #10
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a90:	3b30      	subs	r3, #48	; 0x30
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d94e      	bls.n	8005b34 <_vfiprintf_r+0x1c4>
 8005a96:	b1b0      	cbz	r0, 8005ac6 <_vfiprintf_r+0x156>
 8005a98:	9207      	str	r2, [sp, #28]
 8005a9a:	e014      	b.n	8005ac6 <_vfiprintf_r+0x156>
 8005a9c:	eba0 0308 	sub.w	r3, r0, r8
 8005aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	46a2      	mov	sl, r4
 8005aaa:	e7d2      	b.n	8005a52 <_vfiprintf_r+0xe2>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1d19      	adds	r1, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9103      	str	r1, [sp, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfbb      	ittet	lt
 8005ab8:	425b      	neglt	r3, r3
 8005aba:	f042 0202 	orrlt.w	r2, r2, #2
 8005abe:	9307      	strge	r3, [sp, #28]
 8005ac0:	9307      	strlt	r3, [sp, #28]
 8005ac2:	bfb8      	it	lt
 8005ac4:	9204      	strlt	r2, [sp, #16]
 8005ac6:	7823      	ldrb	r3, [r4, #0]
 8005ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8005aca:	d10c      	bne.n	8005ae6 <_vfiprintf_r+0x176>
 8005acc:	7863      	ldrb	r3, [r4, #1]
 8005ace:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad0:	d135      	bne.n	8005b3e <_vfiprintf_r+0x1ce>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	1d1a      	adds	r2, r3, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	9203      	str	r2, [sp, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bfb8      	it	lt
 8005ade:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ae2:	3402      	adds	r4, #2
 8005ae4:	9305      	str	r3, [sp, #20]
 8005ae6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bcc <_vfiprintf_r+0x25c>
 8005aea:	7821      	ldrb	r1, [r4, #0]
 8005aec:	2203      	movs	r2, #3
 8005aee:	4650      	mov	r0, sl
 8005af0:	f7fa fb76 	bl	80001e0 <memchr>
 8005af4:	b140      	cbz	r0, 8005b08 <_vfiprintf_r+0x198>
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	eba0 000a 	sub.w	r0, r0, sl
 8005afc:	fa03 f000 	lsl.w	r0, r3, r0
 8005b00:	9b04      	ldr	r3, [sp, #16]
 8005b02:	4303      	orrs	r3, r0
 8005b04:	3401      	adds	r4, #1
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0c:	482c      	ldr	r0, [pc, #176]	; (8005bc0 <_vfiprintf_r+0x250>)
 8005b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b12:	2206      	movs	r2, #6
 8005b14:	f7fa fb64 	bl	80001e0 <memchr>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d03f      	beq.n	8005b9c <_vfiprintf_r+0x22c>
 8005b1c:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <_vfiprintf_r+0x254>)
 8005b1e:	bb1b      	cbnz	r3, 8005b68 <_vfiprintf_r+0x1f8>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	3307      	adds	r3, #7
 8005b24:	f023 0307 	bic.w	r3, r3, #7
 8005b28:	3308      	adds	r3, #8
 8005b2a:	9303      	str	r3, [sp, #12]
 8005b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2e:	443b      	add	r3, r7
 8005b30:	9309      	str	r3, [sp, #36]	; 0x24
 8005b32:	e767      	b.n	8005a04 <_vfiprintf_r+0x94>
 8005b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b38:	460c      	mov	r4, r1
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e7a5      	b.n	8005a8a <_vfiprintf_r+0x11a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	3401      	adds	r4, #1
 8005b42:	9305      	str	r3, [sp, #20]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f04f 0c0a 	mov.w	ip, #10
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b50:	3a30      	subs	r2, #48	; 0x30
 8005b52:	2a09      	cmp	r2, #9
 8005b54:	d903      	bls.n	8005b5e <_vfiprintf_r+0x1ee>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0c5      	beq.n	8005ae6 <_vfiprintf_r+0x176>
 8005b5a:	9105      	str	r1, [sp, #20]
 8005b5c:	e7c3      	b.n	8005ae6 <_vfiprintf_r+0x176>
 8005b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b62:	4604      	mov	r4, r0
 8005b64:	2301      	movs	r3, #1
 8005b66:	e7f0      	b.n	8005b4a <_vfiprintf_r+0x1da>
 8005b68:	ab03      	add	r3, sp, #12
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <_vfiprintf_r+0x258>)
 8005b70:	a904      	add	r1, sp, #16
 8005b72:	4630      	mov	r0, r6
 8005b74:	f3af 8000 	nop.w
 8005b78:	4607      	mov	r7, r0
 8005b7a:	1c78      	adds	r0, r7, #1
 8005b7c:	d1d6      	bne.n	8005b2c <_vfiprintf_r+0x1bc>
 8005b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b80:	07d9      	lsls	r1, r3, #31
 8005b82:	d405      	bmi.n	8005b90 <_vfiprintf_r+0x220>
 8005b84:	89ab      	ldrh	r3, [r5, #12]
 8005b86:	059a      	lsls	r2, r3, #22
 8005b88:	d402      	bmi.n	8005b90 <_vfiprintf_r+0x220>
 8005b8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8c:	f7ff fa68 	bl	8005060 <__retarget_lock_release_recursive>
 8005b90:	89ab      	ldrh	r3, [r5, #12]
 8005b92:	065b      	lsls	r3, r3, #25
 8005b94:	f53f af12 	bmi.w	80059bc <_vfiprintf_r+0x4c>
 8005b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9a:	e711      	b.n	80059c0 <_vfiprintf_r+0x50>
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <_vfiprintf_r+0x258>)
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f000 f880 	bl	8005cac <_printf_i>
 8005bac:	e7e4      	b.n	8005b78 <_vfiprintf_r+0x208>
 8005bae:	bf00      	nop
 8005bb0:	08006138 	.word	0x08006138
 8005bb4:	08006158 	.word	0x08006158
 8005bb8:	08006118 	.word	0x08006118
 8005bbc:	0800617c 	.word	0x0800617c
 8005bc0:	08006186 	.word	0x08006186
 8005bc4:	00000000 	.word	0x00000000
 8005bc8:	0800594b 	.word	0x0800594b
 8005bcc:	08006182 	.word	0x08006182

08005bd0 <_printf_common>:
 8005bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	4699      	mov	r9, r3
 8005bd8:	688a      	ldr	r2, [r1, #8]
 8005bda:	690b      	ldr	r3, [r1, #16]
 8005bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be0:	4293      	cmp	r3, r2
 8005be2:	bfb8      	it	lt
 8005be4:	4613      	movlt	r3, r2
 8005be6:	6033      	str	r3, [r6, #0]
 8005be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bec:	4607      	mov	r7, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	b10a      	cbz	r2, 8005bf6 <_printf_common+0x26>
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	0699      	lsls	r1, r3, #26
 8005bfa:	bf42      	ittt	mi
 8005bfc:	6833      	ldrmi	r3, [r6, #0]
 8005bfe:	3302      	addmi	r3, #2
 8005c00:	6033      	strmi	r3, [r6, #0]
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	f015 0506 	ands.w	r5, r5, #6
 8005c08:	d106      	bne.n	8005c18 <_printf_common+0x48>
 8005c0a:	f104 0a19 	add.w	sl, r4, #25
 8005c0e:	68e3      	ldr	r3, [r4, #12]
 8005c10:	6832      	ldr	r2, [r6, #0]
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	42ab      	cmp	r3, r5
 8005c16:	dc26      	bgt.n	8005c66 <_printf_common+0x96>
 8005c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c1c:	1e13      	subs	r3, r2, #0
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	bf18      	it	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	0692      	lsls	r2, r2, #26
 8005c26:	d42b      	bmi.n	8005c80 <_printf_common+0xb0>
 8005c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	4638      	mov	r0, r7
 8005c30:	47c0      	blx	r8
 8005c32:	3001      	adds	r0, #1
 8005c34:	d01e      	beq.n	8005c74 <_printf_common+0xa4>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	68e5      	ldr	r5, [r4, #12]
 8005c3a:	6832      	ldr	r2, [r6, #0]
 8005c3c:	f003 0306 	and.w	r3, r3, #6
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	bf08      	it	eq
 8005c44:	1aad      	subeq	r5, r5, r2
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	6922      	ldr	r2, [r4, #16]
 8005c4a:	bf0c      	ite	eq
 8005c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c50:	2500      	movne	r5, #0
 8005c52:	4293      	cmp	r3, r2
 8005c54:	bfc4      	itt	gt
 8005c56:	1a9b      	subgt	r3, r3, r2
 8005c58:	18ed      	addgt	r5, r5, r3
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	341a      	adds	r4, #26
 8005c5e:	42b5      	cmp	r5, r6
 8005c60:	d11a      	bne.n	8005c98 <_printf_common+0xc8>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e008      	b.n	8005c78 <_printf_common+0xa8>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4652      	mov	r2, sl
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d103      	bne.n	8005c7c <_printf_common+0xac>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	e7c6      	b.n	8005c0e <_printf_common+0x3e>
 8005c80:	18e1      	adds	r1, r4, r3
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	2030      	movs	r0, #48	; 0x30
 8005c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8a:	4422      	add	r2, r4
 8005c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c94:	3302      	adds	r3, #2
 8005c96:	e7c7      	b.n	8005c28 <_printf_common+0x58>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d0e6      	beq.n	8005c74 <_printf_common+0xa4>
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7d9      	b.n	8005c5e <_printf_common+0x8e>
	...

08005cac <_printf_i>:
 8005cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	7e0f      	ldrb	r7, [r1, #24]
 8005cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb4:	2f78      	cmp	r7, #120	; 0x78
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	4680      	mov	r8, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	469a      	mov	sl, r3
 8005cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cc2:	d807      	bhi.n	8005cd4 <_printf_i+0x28>
 8005cc4:	2f62      	cmp	r7, #98	; 0x62
 8005cc6:	d80a      	bhi.n	8005cde <_printf_i+0x32>
 8005cc8:	2f00      	cmp	r7, #0
 8005cca:	f000 80d8 	beq.w	8005e7e <_printf_i+0x1d2>
 8005cce:	2f58      	cmp	r7, #88	; 0x58
 8005cd0:	f000 80a3 	beq.w	8005e1a <_printf_i+0x16e>
 8005cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cdc:	e03a      	b.n	8005d54 <_printf_i+0xa8>
 8005cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce2:	2b15      	cmp	r3, #21
 8005ce4:	d8f6      	bhi.n	8005cd4 <_printf_i+0x28>
 8005ce6:	a101      	add	r1, pc, #4	; (adr r1, 8005cec <_printf_i+0x40>)
 8005ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cec:	08005d45 	.word	0x08005d45
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005cd5 	.word	0x08005cd5
 8005cf8:	08005cd5 	.word	0x08005cd5
 8005cfc:	08005cd5 	.word	0x08005cd5
 8005d00:	08005cd5 	.word	0x08005cd5
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005cd5 	.word	0x08005cd5
 8005d0c:	08005cd5 	.word	0x08005cd5
 8005d10:	08005cd5 	.word	0x08005cd5
 8005d14:	08005cd5 	.word	0x08005cd5
 8005d18:	08005e65 	.word	0x08005e65
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005e47 	.word	0x08005e47
 8005d24:	08005cd5 	.word	0x08005cd5
 8005d28:	08005cd5 	.word	0x08005cd5
 8005d2c:	08005e87 	.word	0x08005e87
 8005d30:	08005cd5 	.word	0x08005cd5
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005cd5 	.word	0x08005cd5
 8005d3c:	08005cd5 	.word	0x08005cd5
 8005d40:	08005e4f 	.word	0x08005e4f
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	1d1a      	adds	r2, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	602a      	str	r2, [r5, #0]
 8005d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0a3      	b.n	8005ea0 <_printf_i+0x1f4>
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	6829      	ldr	r1, [r5, #0]
 8005d5c:	0606      	lsls	r6, r0, #24
 8005d5e:	f101 0304 	add.w	r3, r1, #4
 8005d62:	d50a      	bpl.n	8005d7a <_printf_i+0xce>
 8005d64:	680e      	ldr	r6, [r1, #0]
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	da03      	bge.n	8005d74 <_printf_i+0xc8>
 8005d6c:	232d      	movs	r3, #45	; 0x2d
 8005d6e:	4276      	negs	r6, r6
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	485e      	ldr	r0, [pc, #376]	; (8005ef0 <_printf_i+0x244>)
 8005d76:	230a      	movs	r3, #10
 8005d78:	e019      	b.n	8005dae <_printf_i+0x102>
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d82:	bf18      	it	ne
 8005d84:	b236      	sxthne	r6, r6
 8005d86:	e7ef      	b.n	8005d68 <_printf_i+0xbc>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	0601      	lsls	r1, r0, #24
 8005d92:	d501      	bpl.n	8005d98 <_printf_i+0xec>
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <_printf_i+0xf2>
 8005d98:	0646      	lsls	r6, r0, #25
 8005d9a:	d5fb      	bpl.n	8005d94 <_printf_i+0xe8>
 8005d9c:	881e      	ldrh	r6, [r3, #0]
 8005d9e:	4854      	ldr	r0, [pc, #336]	; (8005ef0 <_printf_i+0x244>)
 8005da0:	2f6f      	cmp	r7, #111	; 0x6f
 8005da2:	bf0c      	ite	eq
 8005da4:	2308      	moveq	r3, #8
 8005da6:	230a      	movne	r3, #10
 8005da8:	2100      	movs	r1, #0
 8005daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dae:	6865      	ldr	r5, [r4, #4]
 8005db0:	60a5      	str	r5, [r4, #8]
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	bfa2      	ittt	ge
 8005db6:	6821      	ldrge	r1, [r4, #0]
 8005db8:	f021 0104 	bicge.w	r1, r1, #4
 8005dbc:	6021      	strge	r1, [r4, #0]
 8005dbe:	b90e      	cbnz	r6, 8005dc4 <_printf_i+0x118>
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	d04d      	beq.n	8005e60 <_printf_i+0x1b4>
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dca:	fb03 6711 	mls	r7, r3, r1, r6
 8005dce:	5dc7      	ldrb	r7, [r0, r7]
 8005dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd4:	4637      	mov	r7, r6
 8005dd6:	42bb      	cmp	r3, r7
 8005dd8:	460e      	mov	r6, r1
 8005dda:	d9f4      	bls.n	8005dc6 <_printf_i+0x11a>
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d10b      	bne.n	8005df8 <_printf_i+0x14c>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07de      	lsls	r6, r3, #31
 8005de4:	d508      	bpl.n	8005df8 <_printf_i+0x14c>
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	4299      	cmp	r1, r3
 8005dec:	bfde      	ittt	le
 8005dee:	2330      	movle	r3, #48	; 0x30
 8005df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005df8:	1b52      	subs	r2, r2, r5
 8005dfa:	6122      	str	r2, [r4, #16]
 8005dfc:	f8cd a000 	str.w	sl, [sp]
 8005e00:	464b      	mov	r3, r9
 8005e02:	aa03      	add	r2, sp, #12
 8005e04:	4621      	mov	r1, r4
 8005e06:	4640      	mov	r0, r8
 8005e08:	f7ff fee2 	bl	8005bd0 <_printf_common>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d14c      	bne.n	8005eaa <_printf_i+0x1fe>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e14:	b004      	add	sp, #16
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	4835      	ldr	r0, [pc, #212]	; (8005ef0 <_printf_i+0x244>)
 8005e1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e20:	6829      	ldr	r1, [r5, #0]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e28:	6029      	str	r1, [r5, #0]
 8005e2a:	061d      	lsls	r5, r3, #24
 8005e2c:	d514      	bpl.n	8005e58 <_printf_i+0x1ac>
 8005e2e:	07df      	lsls	r7, r3, #31
 8005e30:	bf44      	itt	mi
 8005e32:	f043 0320 	orrmi.w	r3, r3, #32
 8005e36:	6023      	strmi	r3, [r4, #0]
 8005e38:	b91e      	cbnz	r6, 8005e42 <_printf_i+0x196>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	f023 0320 	bic.w	r3, r3, #32
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	2310      	movs	r3, #16
 8005e44:	e7b0      	b.n	8005da8 <_printf_i+0xfc>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f043 0320 	orr.w	r3, r3, #32
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2378      	movs	r3, #120	; 0x78
 8005e50:	4828      	ldr	r0, [pc, #160]	; (8005ef4 <_printf_i+0x248>)
 8005e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e56:	e7e3      	b.n	8005e20 <_printf_i+0x174>
 8005e58:	0659      	lsls	r1, r3, #25
 8005e5a:	bf48      	it	mi
 8005e5c:	b2b6      	uxthmi	r6, r6
 8005e5e:	e7e6      	b.n	8005e2e <_printf_i+0x182>
 8005e60:	4615      	mov	r5, r2
 8005e62:	e7bb      	b.n	8005ddc <_printf_i+0x130>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	6826      	ldr	r6, [r4, #0]
 8005e68:	6961      	ldr	r1, [r4, #20]
 8005e6a:	1d18      	adds	r0, r3, #4
 8005e6c:	6028      	str	r0, [r5, #0]
 8005e6e:	0635      	lsls	r5, r6, #24
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0x1cc>
 8005e74:	6019      	str	r1, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <_printf_i+0x1d2>
 8005e78:	0670      	lsls	r0, r6, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0x1c8>
 8005e7c:	8019      	strh	r1, [r3, #0]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	4615      	mov	r5, r2
 8005e84:	e7ba      	b.n	8005dfc <_printf_i+0x150>
 8005e86:	682b      	ldr	r3, [r5, #0]
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	2100      	movs	r1, #0
 8005e92:	4628      	mov	r0, r5
 8005e94:	f7fa f9a4 	bl	80001e0 <memchr>
 8005e98:	b108      	cbz	r0, 8005e9e <_printf_i+0x1f2>
 8005e9a:	1b40      	subs	r0, r0, r5
 8005e9c:	6060      	str	r0, [r4, #4]
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	e7a8      	b.n	8005dfc <_printf_i+0x150>
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	462a      	mov	r2, r5
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	47d0      	blx	sl
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0ab      	beq.n	8005e10 <_printf_i+0x164>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	d413      	bmi.n	8005ee6 <_printf_i+0x23a>
 8005ebe:	68e0      	ldr	r0, [r4, #12]
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	bfb8      	it	lt
 8005ec6:	4618      	movlt	r0, r3
 8005ec8:	e7a4      	b.n	8005e14 <_printf_i+0x168>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4632      	mov	r2, r6
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	47d0      	blx	sl
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d09b      	beq.n	8005e10 <_printf_i+0x164>
 8005ed8:	3501      	adds	r5, #1
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	9903      	ldr	r1, [sp, #12]
 8005ede:	1a5b      	subs	r3, r3, r1
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	dcf2      	bgt.n	8005eca <_printf_i+0x21e>
 8005ee4:	e7eb      	b.n	8005ebe <_printf_i+0x212>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	f104 0619 	add.w	r6, r4, #25
 8005eec:	e7f5      	b.n	8005eda <_printf_i+0x22e>
 8005eee:	bf00      	nop
 8005ef0:	0800618d 	.word	0x0800618d
 8005ef4:	0800619e 	.word	0x0800619e

08005ef8 <_read_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_read_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb fc8a 	bl	8001820 <_read>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_read_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_read_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	20004280 	.word	0x20004280

08005f1c <_fstat_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	; (8005f3c <_fstat_r+0x20>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	f7fb fca2 	bl	8001872 <_fstat>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	d102      	bne.n	8005f38 <_fstat_r+0x1c>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	b103      	cbz	r3, 8005f38 <_fstat_r+0x1c>
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	bd38      	pop	{r3, r4, r5, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20004280 	.word	0x20004280

08005f40 <_isatty_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d06      	ldr	r5, [pc, #24]	; (8005f5c <_isatty_r+0x1c>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f7fb fca1 	bl	8001892 <_isatty>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_isatty_r+0x1a>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_isatty_r+0x1a>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20004280 	.word	0x20004280

08005f60 <_init>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr

08005f6c <_fini>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr
